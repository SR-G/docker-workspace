<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type='text/xsl' href='http://www.osgi.org/www/obr2html.xsl'?>

<repository lastmodified='20160825113552.479' name='Untitled'>
  <resource id='JGoogleAnalytics_0.3/0.0.0' presentationname='JGoogleAnalytics_0.3' symbolicname='JGoogleAnalytics_0.3' uri='JGoogleAnalytics_0.3-0.0.0.jar' version='0.0.0'>
    <size>
      8945
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='JGoogleAnalytics_0.3'/>
      <p n='symbolicname' v='JGoogleAnalytics_0.3'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.boxysystems.jgoogleanalytics'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
  </resource>
  <resource id='com.elsten.bliss.analytics/1.0.1' presentationname='com.elsten.bliss.analytics' symbolicname='com.elsten.bliss.analytics' uri='com.elsten.bliss.analytics-1.0.1.jar' version='1.0.1'>
    <size>
      3019
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.analytics'/>
      <p n='symbolicname' v='com.elsten.bliss.analytics'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.analytics'/>
      <p n='uses' v='com.elsten.bliss.platform.model'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.boxysystems.jgoogleanalytics)(version&gt;=0.0.0)(!(version&gt;=1.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.boxysystems.jgoogleanalytics ;version=[0.0.0,1.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.api/2.0.11' presentationname='com.elsten.bliss.api' symbolicname='com.elsten.bliss.api' uri='com.elsten.bliss.api-2.0.11.jar' version='2.0.11'>
    <size>
      6078
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.api'/>
      <p n='symbolicname' v='com.elsten.bliss.api'/>
      <p n='version' t='version' v='2.0.11'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.api'/>
      <p n='uses' v='com.elsten.bliss.main,org.apache.log4j,org.osgi.framework,scala.reflect'/>
      <p n='version' t='version' v='2.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.main)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.main ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.bundle/0.0.34.201608251028' presentationname='com.elsten.bliss.bundle' symbolicname='com.elsten.bliss.bundle' uri='com.elsten.bliss.bundle-0.0.34.jar' version='0.0.34.201608251028'>
    <size>
      3866
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.bundle'/>
      <p n='symbolicname' v='com.elsten.bliss.bundle'/>
      <p n='version' t='version' v='0.0.34.201608251028'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.scr)(version&gt;=1.6.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.scr ;version=1.6.0
    </require>
  </resource>
  <resource id='com.elsten.bliss.charge.api/3.0.2' presentationname='com.elsten.bliss.charge.api' symbolicname='com.elsten.bliss.charge.api' uri='com.elsten.bliss.charge.api-3.0.2.jar' version='3.0.2'>
    <size>
      4349
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.charge.api'/>
      <p n='symbolicname' v='com.elsten.bliss.charge.api'/>
      <p n='version' t='version' v='3.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.charge.api'/>
      <p n='uses' v='com.stripe.exception,com.stripe.model'/>
      <p n='version' t='version' v='3.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.stripe.exception)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.stripe.exception ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.stripe.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.stripe.model ;version=[1.0.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.configuration.file/1.0.10' presentationname='com.elsten.bliss.configuration.file' symbolicname='com.elsten.bliss.configuration.file' uri='com.elsten.bliss.configuration.file-1.0.10.jar' version='1.0.10'>
    <size>
      13781
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.configuration.file'/>
      <p n='symbolicname' v='com.elsten.bliss.configuration.file'/>
      <p n='version' t='version' v='1.0.10'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.client)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.client ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.config)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.config ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy2)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy2 ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.licence/3.0.0' presentationname='com.elsten.bliss.licence' symbolicname='com.elsten.bliss.licence' uri='com.elsten.bliss.licence-3.0.0.jar' version='3.0.0'>
    <size>
      21628
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.licence'/>
      <p n='symbolicname' v='com.elsten.bliss.licence'/>
      <p n='version' t='version' v='3.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.licence'/>
      <p n='uses' v='com.elsten.bliss.platform.model,com.google.common.base'/>
      <p n='version' t='version' v='3.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.analytics)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.analytics ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.crypto)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.crypto
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.codec.binary)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.codec.binary ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.math)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.math ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.logging/1.0.24' presentationname='com.elsten.bliss.logging' symbolicname='com.elsten.bliss.logging' uri='com.elsten.bliss.logging-1.0.24.jar' version='1.0.24'>
    <size>
      5168
    </size>
    <capability name='fragment'>
      <p n='host' v='log4j'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='log4j'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.logging'/>
      <p n='symbolicname' v='com.elsten.bliss.logging'/>
      <p n='version' t='version' v='1.0.24'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.logging'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=log4j)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host log4j
    </require>
  </resource>
  <resource id='com.elsten.bliss.model/36.4.1' presentationname='com.elsten.bliss.model' symbolicname='com.elsten.bliss.model' uri='com.elsten.bliss.model-36.4.1.jar' version='36.4.1'>
    <size>
      773000
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.model'/>
      <p n='symbolicname' v='com.elsten.bliss.model'/>
      <p n='version' t='version' v='36.4.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.client'/>
      <p n='uses' v='com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.platform,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage.model,com.elsten.bliss.platform.tagindex.model,com.elsten.bliss.untagged,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.conceptual.model'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.policy,com.elsten.bliss.music.tagged,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.model,com.elsten.bliss.platform.tagindex.model,com.elsten.bliss.platform.util,com.elsten.concurrent,com.elsten.util,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.util,com.elsten.util,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync.model'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.tagged'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.tagged.mapper.musicimpl,com.elsten.bliss.platform.storage,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.tagged.mapper.model'/>
      <p n='uses' v='com.elsten.bliss.music.tagged,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.model,com.elsten.bliss.platform.tagindex.model,com.elsten.bliss.untagged'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.tagged.mapper.musicimpl'/>
      <p n='uses' v='com.elsten.bliss.music.tagged,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.tagindex.model,com.elsten.util'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.tagged.query'/>
      <p n='uses' v='com.elsten.bliss.music.tagged,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.tagindex.model'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.activity.model'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.model'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.info,com.elsten.bliss.music.policy,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.platform.storage.model,com.elsten.bliss.platform.tagindex.model,com.google.common.base'/>
      <p n='version' t='version' v='2.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.storage.file.util'/>
      <p n='uses' v='com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.model,com.elsten.util,org.apache.commons.io.filefilter'/>
      <p n='version' t='version' v='1.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.storage.model'/>
      <p n='uses' v='com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.tagindex.model'/>
      <p n='uses' v='com.elsten.bliss.platform,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.platform.storage.model,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.util'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.platform.model,com.elsten.util,org.apache.commons.httpclient'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.untagged'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.model,com.elsten.bliss.platform.tagindex.model,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.info,com.elsten.bliss.music.policy,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.platform.storage.model'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.coverartpolicy.model'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.lang)(version&gt;=6.10.0)(!(version&gt;=7.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.lang ;version=[6.10.0,7.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.collections)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.collections ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.concurrent)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.concurrent ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.base)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.base ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.collections)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.collections ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.lang)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.lang ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.cache)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.cache ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.util.concurrent)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.util.concurrent ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections)(version&gt;=3.2.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections ;version=[3.2.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.filefilter)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.filefilter ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.builder)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.builder ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.exception)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.exception ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.model.api/11.0.0' presentationname='com.elsten.bliss.model.api' symbolicname='com.elsten.bliss.model.api' uri='com.elsten.bliss.model.api-11.0.0.jar' version='11.0.0'>
    <size>
      53797
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.model.api'/>
      <p n='symbolicname' v='com.elsten.bliss.model.api'/>
      <p n='version' t='version' v='11.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.storage'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.model'/>
      <p n='uses' v='com.elsten.bliss.platform.storage,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.builder)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.builder ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.music.info.api/17.1.0' presentationname='com.elsten.bliss.music.info.api' symbolicname='com.elsten.bliss.music.info.api' uri='com.elsten.bliss.music.info.api-17.1.0.jar' version='17.1.0'>
    <size>
      54563
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.music.info.api'/>
      <p n='symbolicname' v='com.elsten.bliss.music.info.api'/>
      <p n='version' t='version' v='17.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.info'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.util,com.google.common.base,org.apache.commons.httpclient,org.apache.commons.httpclient.methods'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.info2'/>
      <p n='version' t='version' v='17.1.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.collections)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.collections ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient.methods)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient.methods ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.music.info.common/11.0.0' presentationname='com.elsten.bliss.music.info.common' symbolicname='com.elsten.bliss.music.info.common' uri='com.elsten.bliss.music.info.common-11.0.0.jar' version='11.0.0'>
    <size>
      61499
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.music.info.common'/>
      <p n='symbolicname' v='com.elsten.bliss.music.info.common'/>
      <p n='version' t='version' v='11.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.info.common'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.bliss.music.info,com.elsten.bliss.platform.storage,com.elsten.bliss.policy.coverart.lookup,com.elsten.util,com.google.common.base,com.google.common.collect,org.apache.commons.httpclient.methods'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.info.common2'/>
      <p n='version' t='version' v='11.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.annotation)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='true'>
      Import package javax.annotation ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.conceptual.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.conceptual.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.coverart.lookup)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.coverart.lookup ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.collections)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.collections ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient.methods)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient.methods ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.builder)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.builder ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.music.info.dto/1.0.2' presentationname='com.elsten.bliss.music.info.dto' symbolicname='com.elsten.bliss.music.info.dto' uri='com.elsten.bliss.music.info.dto-1.0.2.jar' version='1.0.2'>
    <size>
      5805
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.music.info.dto'/>
      <p n='symbolicname' v='com.elsten.bliss.music.info.dto'/>
      <p n='version' t='version' v='1.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.info.dto'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
  </resource>
  <resource id='com.elsten.bliss.music.info.onemusicapi/1.1.39' presentationname='com.elsten.bliss.music.info.onemusicapi' symbolicname='com.elsten.bliss.music.info.onemusicapi' uri='com.elsten.bliss.music.info.onemusicapi-1.1.39.jar' version='1.1.39'>
    <size>
      130204
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.music.info.onemusicapi'/>
      <p n='symbolicname' v='com.elsten.bliss.music.info.onemusicapi'/>
      <p n='version' t='version' v='1.1.39'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.onemusicapi'/>
      <p n='version' t='version' v='1.1.39'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info.common)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info.common ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.coverart.lookup)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.coverart.lookup
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.coverart.lookup.common)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.coverart.lookup.common
       ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.tag.auto)(version&gt;=10.0.0)(!(version&gt;=11.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.tag.auto ;version=[10.0.0,11.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.scala)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.scala ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.onemusicapi)(version&gt;=11.0.0)(!(version&gt;=12.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.onemusicapi ;version=[11.0.0,12.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.onemusicapi.common.v20140925)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.onemusicapi.common.v20140925
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient.methods)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient.methods ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.convert)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.convert ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.matching)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.matching ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.music.info.tagsource.api/2.0.3' presentationname='com.elsten.bliss.music.info.tagsource.api' symbolicname='com.elsten.bliss.music.info.tagsource.api' uri='com.elsten.bliss.music.info.tagsource.api-2.0.3.jar' version='2.0.3'>
    <size>
      2327
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.music.info.tagsource.api'/>
      <p n='symbolicname' v='com.elsten.bliss.music.info.tagsource.api'/>
      <p n='version' t='version' v='2.0.3'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.info.tagsource'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.platform.storage'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage ;version=[1.0.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.music.info.tagsource.impl/2.2.0' presentationname='com.elsten.bliss.music.info.tagsource.impl' symbolicname='com.elsten.bliss.music.info.tagsource.impl' uri='com.elsten.bliss.music.info.tagsource.impl-2.2.0.jar' version='2.2.0'>
    <size>
      13161
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.music.info.tagsource.impl'/>
      <p n='symbolicname' v='com.elsten.bliss.music.info.tagsource.impl'/>
      <p n='version' t='version' v='2.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.info.tagsource.impl'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.bliss.music.info,com.elsten.bliss.music.info.tagsource,com.elsten.bliss.platform.storage,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info.common)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info.common ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info.tagsource)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info.tagsource
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.collections)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.collections ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.online.untaggeddb.common/1.0.9.201608171551' presentationname='com.elsten.bliss.online.untaggeddb.common' symbolicname='com.elsten.bliss.online.untaggeddb.common' uri='com.elsten.bliss.online.untaggeddb.common-1.0.9.jar' version='1.0.9.201608171551'>
    <size>
      24835
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.online.untaggeddb.common'/>
      <p n='symbolicname' v='com.elsten.bliss.online.untaggeddb.common'/>
      <p n='version' t='version' v='1.0.9.201608171551'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.online.untaggeddb.dto'/>
      <p n='uses' v='scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime'/>
      <p n='version' t='version' v='1.0.9'/>
    </capability>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.osgi.system/1.0.7' presentationname='com.elsten.bliss.osgi.system' symbolicname='com.elsten.bliss.osgi.system' uri='com.elsten.bliss.osgi.system-1.0.7.jar' version='1.0.7'>
    <size>
      569
    </size>
    <capability name='fragment'>
      <p n='host' v='system.bundle'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='system.bundle'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.osgi.system'/>
      <p n='symbolicname' v='com.elsten.bliss.osgi.system'/>
      <p n='version' t='version' v='1.0.7'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='sun.nio.ch'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.image.codec.jpeg'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.management'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.medialib.mlib'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.org.apache.xpath.internal.jaxp'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.xml.internal.bind.v2'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='sun.security.action'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='sun.misc'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='sun.reflect'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='javax.swing'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='sun.awt.image'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='sun.awt.image.codec'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='sun.security.action'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.w3c.dom'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='javax.xml.transform'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='javax.xml.namespace'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='javax.xml.bind'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.apple.eio'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.apple.eawt'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=system.bundle)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host system.bundle
    </require>
  </resource>
  <resource id='com.elsten.bliss.osgi.system.osx/1.0.3' presentationname='com.elsten.bliss.osgi.system.osx' symbolicname='com.elsten.bliss.osgi.system.osx' uri='com.elsten.bliss.osgi.system.osx-1.0.3.jar' version='1.0.3'>
    <size>
      4434
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.osgi.system.osx'/>
      <p n='symbolicname' v='com.elsten.bliss.osgi.system.osx'/>
      <p n='version' t='version' v='1.0.3'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.apple.eawt)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.apple.eawt
    </require>
  </resource>
  <resource id='com.elsten.bliss.platform/42.1.4' presentationname='com.elsten.bliss.platform' symbolicname='com.elsten.bliss.platform' uri='com.elsten.bliss.platform-42.1.4.jar' version='42.1.4'>
    <size>
      1158654
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.platform'/>
      <p n='symbolicname' v='com.elsten.bliss.platform'/>
      <p n='version' t='version' v='42.1.4'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.client.impl'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy2,com.elsten.bliss.platform,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.platform.storage.model,com.elsten.bliss.platform.tagindex.model,com.elsten.bliss.untagged,com.elsten.bliss.untagged2,com.google.common.base'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.main'/>
      <p n='uses' v='com.elsten.bliss.client.impl,com.elsten.bliss.licence,com.elsten.bliss.music.info,com.elsten.bliss.music.info.tagsource,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.tagsync.regex.rulescript,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.policy.coverart.lookup,com.elsten.bliss.untagged,com.google.common.base,org.osgi.framework'/>
      <p n='version' t='version' v='2.0.5'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.config'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.coverartpolicy'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.info,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.coverartpolicy.assessment,com.elsten.bliss.music.policy.coverartpolicy.response,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.policy.coverart.lookup,com.elsten.bliss.policy.coverart.lookup.common,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.coverartpolicy.assessment'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.coverartpolicy,com.elsten.bliss.music.policy.coverartpolicy.response,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.policy.coverart.lookup,com.elsten.util,com.google.common.base,org.apache.log4j'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.coverartpolicy.response'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.coverartpolicy,com.elsten.bliss.music.policy.coverartpolicy.assessment,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.fileorg'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.fileorg.pattern,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.util,com.elsten.util'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.fileorg.pattern'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.policy.fileorg.pattern.token'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.fileorg.pattern.token'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.info.tagsource,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.tagsync.model,com.elsten.bliss.music.policy.tagsync.regex.rulescript,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync.allowablegenres'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.info.tagsource,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.tagsync.model,com.elsten.bliss.platform.activity.model,com.elsten.util,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync.consolidateartist'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.music.policy'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync.response'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.policy.tagsync.model,com.elsten.bliss.platform.storage,com.elsten.util'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync.trackartist'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.bliss.music.policy,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync.tracknumberformat'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.tagsync,com.elsten.bliss.music.policy.tagsync.model,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.storage,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy2'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.licence,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.storage.bus'/>
      <p n='uses' v='com.elsten.bliss.platform,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.platform.storage.model,com.google.common.collect,org.apache.commons.io.filefilter,org.jaudiotagger.tag'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.storage.file.jaudiotagger'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.jaudiotagger.tag,com.elsten.bliss.platform.storage.file.util,com.elsten.util,com.google.common.base,com.google.common.cache,org.apache.commons.io.filefilter,org.jaudiotagger.audio,org.jaudiotagger.audio.exceptions,org.jaudiotagger.tag,org.jaudiotagger.tag.images'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.tagindex'/>
      <p n='uses' v='com.elsten.bliss.platform,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.platform.tagindex.model'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.util2'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.untagged2'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.policy,com.elsten.bliss.platform,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.bliss.untagged,com.elsten.util,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.activity'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.platform,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform2'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.platform.storage.model,com.elsten.bliss.platform.tagindex.model,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.storage.file'/>
      <p n='uses' v='com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.file.util,com.elsten.bliss.platform.storage.model,com.google.common.base,org.apache.commons.io.filefilter'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.conceptual'/>
      <p n='uses' v='com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.tagged,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.model,com.elsten.bliss.platform.storage,com.elsten.util,org.apache.log4j'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.tagged.mapper'/>
      <p n='uses' v='com.elsten.bliss.music.tagged,com.elsten.bliss.music.tagged.mapper.model,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.storage,com.elsten.bliss.platform.storage.model,com.elsten.bliss.platform.tagindex.model,com.elsten.bliss.untagged'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.platform.storage.file.jaudiotagger.tag'/>
      <p n='uses' v='com.elsten.bliss.platform.storage,com.elsten.util,com.google.common.base,com.google.common.cache,org.jaudiotagger.audio,org.jaudiotagger.audio.wav,org.jaudiotagger.tag,org.jaudiotagger.tag.images,org.jaudiotagger.tag.mp4'/>
      <p n='version' t='version' v='32.1.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync.regex'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.music.policy,com.elsten.bliss.platform.storage,com.google.common.base'/>
      <p n='version' t='version' v='32.1.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tagsync.regex.rulescript'/>
      <p n='uses' v='com.elsten.bliss.music.policy,com.elsten.bliss.platform.storage,com.elsten.bliss.policy.parsed.regex,com.google.common.base'/>
      <p n='version' t='version' v='42.1.4'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tag.auto'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.client.platform'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.analytics)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.analytics ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.client)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.client
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.licence)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.licence ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.conceptual.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.conceptual.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info.common)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info.common ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info.tagsource)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info.tagsource ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info.tagsource.impl)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info.tagsource.impl ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tag.tagtype)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tag.tagtype ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.model
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.regex)(version&gt;=32.1.0)(!(version&gt;=33.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.regex
       ;version=[32.1.0,33.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.tagged)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.tagged
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.tagged.mapper.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.tagged.mapper.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.online.untaggeddb.dto)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.online.untaggeddb.dto ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.activity.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.activity.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage.file.util)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage.file.util
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.tagindex.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.tagindex.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.util)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.util ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.coverart.lookup)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.coverart.lookup
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.coverart.lookup.common)(version&gt;=8.0.0)(!(version&gt;=9.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.coverart.lookup.common
       ;version=[8.0.0,9.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.parsed)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.parsed ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.parsed.regex)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.parsed.regex ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.untagged)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.untagged ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.collections)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.collections ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.concurrent)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.concurrent ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.base)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.base ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.collections)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.collections ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.gson)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.gson ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.lang)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.lang ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.mapdb)(version&gt;=6.10.0)(!(version&gt;=7.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.mapdb ;version=[6.10.0,7.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.cache)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.cache ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.io)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.io ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.primitives)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.primitives ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.util.concurrent)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.util.concurrent ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.gson)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.gson ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.jna)(version&gt;=3.2.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.sun.jna ;version=[3.2.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.jna.win32)(version&gt;=3.2.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.sun.jna.win32 ;version=[3.2.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.crypto)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.crypto
    </require>
    <require extend='false' filter='(&amp;(package=javax.crypto.spec)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.crypto.spec
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.codec.binary)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.codec.binary ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections)(version&gt;=3.2.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections ;version=[3.2.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.filefilter)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.filefilter ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.input)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.input ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.builder)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.builder ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.exception)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.exception ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.time)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.time ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.audio)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.audio ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.audio.exceptions)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.audio.exceptions ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.audio.mp3)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.audio.mp3 ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.audio.real)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.audio.real ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.audio.wav)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.audio.wav ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.aiff)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.aiff ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.asf)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.asf ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.datatype)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.datatype ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.flac)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.flac ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.id3)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.id3 ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.id3.framebody)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.id3.framebody ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.images)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.images ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.mp4)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.mp4 ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.mp4.field)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.mp4.field ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.reference)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.reference ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.vorbiscomment)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.vorbiscomment ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.jaudiotagger.tag.wav)(version&gt;=101.2.0)(!(version&gt;=102.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.jaudiotagger.tag.wav ;version=[101.2.0,102.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.mapdb)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.mapdb ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.w3c.dom)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.w3c.dom
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.9.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.9.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.9.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.9.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=sun.reflect)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package sun.reflect
    </require>
    <require extend='false' filter='(&amp;(package=com.apple.eio)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.apple.eio
    </require>
  </resource>
  <resource id='com.elsten.bliss.platform.storage.file.observer.filewatcher/1.0.8.201608021611' presentationname='com.elsten.bliss.platform.storage.file.observer.filewatcher' symbolicname='com.elsten.bliss.platform.storage.file.observer.filewatcher' uri='com.elsten.bliss.platform.storage.file.observer.filewatcher-1.0.8.jar' version='1.0.8.201608021611'>
    <size>
      45617
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.platform.storage.file.observer.filewatcher'/>
      <p n='symbolicname' v='com.elsten.bliss.platform.storage.file.observer.filewatcher'/>
      <p n='version' t='version' v='1.0.8.201608021611'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.activity.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.activity.model
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage.file)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage.file
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage.file.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage.file.util
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage.model
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.convert)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.convert ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.coverart.lookup.api/6.0.2' presentationname='com.elsten.bliss.policy.coverart.lookup.api' symbolicname='com.elsten.bliss.policy.coverart.lookup.api' uri='com.elsten.bliss.policy.coverart.lookup.api-6.0.2.jar' version='6.0.2'>
    <size>
      10469
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.coverart.lookup.api'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.coverart.lookup.api'/>
      <p n='version' t='version' v='6.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.policy.coverart.lookup'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.bliss.music.info,com.elsten.bliss.music.policy,com.elsten.bliss.platform.storage,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.coverart.lookup.common/10.0.2' presentationname='com.elsten.bliss.policy.coverart.lookup.common' symbolicname='com.elsten.bliss.policy.coverart.lookup.common' uri='com.elsten.bliss.policy.coverart.lookup.common-10.0.2.jar' version='10.0.2'>
    <size>
      110330
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.coverart.lookup.common'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.coverart.lookup.common'/>
      <p n='version' t='version' v='10.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.policy.coverart.lookup.common'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.bliss.music.info,com.elsten.bliss.music.policy,com.elsten.bliss.platform.storage,com.elsten.bliss.policy.coverart.lookup,com.elsten.util,com.google.common.base,org.apache.log4j'/>
      <p n='version' t='version' v='8.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.conceptual.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.conceptual.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info.common)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info.common ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.util)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.util ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.coverart.lookup)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.coverart.lookup
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.base)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.base ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.lang)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.lang ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.cache)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.cache ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.util.concurrent)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.util.concurrent ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.stream
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections)(version&gt;=3.2.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections ;version=[3.2.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient.methods)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient.methods ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.input)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.input ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.builder)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.builder ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.parsed/23.0.0' presentationname='com.elsten.bliss.policy.parsed' symbolicname='com.elsten.bliss.policy.parsed' uri='com.elsten.bliss.policy.parsed-23.0.0.jar' version='23.0.0'>
    <size>
      607397
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.parsed'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.parsed'/>
      <p n='version' t='version' v='23.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.policy.parsed'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.music.policy.tagsync.model,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.storage,com.elsten.util,com.google.common.base,com.onemusicapi,com.onemusicapi.common.v20140925,org.apache.log4j,scala,scala.collection,scala.collection.immutable,scala.collection.mutable,scala.reflect,scala.runtime,scala.util,scala.util.matching,scala.util.parsing.combinator,scala.util.parsing.combinator.lexical,scala.util.parsing.combinator.syntactical,scala.util.parsing.input'/>
      <p n='version' t='version' v='2.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.policy.parsed.regex'/>
      <p n='uses' v='com.elsten.bliss.platform.storage,scala,scala.collection,scala.collection.immutable,scala.collection.mutable,scala.reflect,scala.runtime,scala.util,scala.util.matching,scala.util.parsing.combinator,scala.util.parsing.input'/>
      <p n='version' t='version' v='3.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.conceptual.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.conceptual.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.model
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.activity.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.activity.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.scala)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.scala ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.onemusicapi)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.onemusicapi
    </require>
    <require extend='false' filter='(&amp;(package=com.onemusicapi.common.v20140925)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.onemusicapi.common.v20140925 ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.w3c.dom)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.w3c.dom
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.math)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.math ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.matching)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.matching ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.parsing.combinator)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.parsing.combinator ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.parsing.combinator.lexical)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.parsing.combinator.lexical ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.parsing.combinator.syntactical)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.parsing.combinator.syntactical ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.parsing.input)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.parsing.input ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.regexruleloader/1.0.16.201608171359' presentationname='com.elsten.bliss.policy.regexruleloader' symbolicname='com.elsten.bliss.policy.regexruleloader' uri='com.elsten.bliss.policy.regexruleloader-1.0.16.jar' version='1.0.16.201608171359'>
    <size>
      7490
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.regexruleloader'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.regexruleloader'/>
      <p n='version' t='version' v='1.0.16.201608171359'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.regex.rulescript)(version&gt;=42.1.0)(!(version&gt;=43.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.regex.rulescript
       ;version=[42.1.0,43.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.io)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.io ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.tag.auto/10.0.2' presentationname='com.elsten.bliss.policy.tag.auto' symbolicname='com.elsten.bliss.policy.tag.auto' uri='com.elsten.bliss.policy.tag.auto-10.0.2.jar' version='10.0.2'>
    <size>
      165100
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='version' t='version' v='10.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='uses' v='com.elsten.bliss.platform.storage,com.google.common.base,org.apache.log4j,scala,scala.collection,scala.reflect,scala.runtime,scala.util,scala.util.matching'/>
      <p n='version' t='version' v='10.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.concurrent)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.concurrent ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.matching)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.matching ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.xml)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.xml ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.tag.auto.linux.amd64/1.0.1' presentationname='com.elsten.bliss.policy.tag.auto.linux.amd64' symbolicname='com.elsten.bliss.policy.tag.auto.linux.amd64' uri='com.elsten.bliss.policy.tag.auto.linux.amd64-1.0.1.jar' version='1.0.1'>
    <size>
      1043552
    </size>
    <capability name='fragment'>
      <p n='host' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.tag.auto.linux.amd64'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.tag.auto.linux.amd64'/>
      <p n='version' t='version' v='1.0.1'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=com.elsten.bliss.policy.tag.auto)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host com.elsten.bliss.policy.tag.auto
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.tag.auto.linux.x86/1.0.1' presentationname='com.elsten.bliss.policy.tag.auto.linux.x86' symbolicname='com.elsten.bliss.policy.tag.auto.linux.x86' uri='com.elsten.bliss.policy.tag.auto.linux.x86-1.0.1.jar' version='1.0.1'>
    <size>
      1063379
    </size>
    <capability name='fragment'>
      <p n='host' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.tag.auto.linux.x86'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.tag.auto.linux.x86'/>
      <p n='version' t='version' v='1.0.1'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=com.elsten.bliss.policy.tag.auto)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host com.elsten.bliss.policy.tag.auto
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.tag.auto.osx/1.0.1' presentationname='com.elsten.bliss.policy.tag.auto.osx' symbolicname='com.elsten.bliss.policy.tag.auto.osx' uri='com.elsten.bliss.policy.tag.auto.osx-1.0.1.jar' version='1.0.1'>
    <size>
      967379
    </size>
    <capability name='fragment'>
      <p n='host' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.tag.auto.osx'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.tag.auto.osx'/>
      <p n='version' t='version' v='1.0.1'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=com.elsten.bliss.policy.tag.auto)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host com.elsten.bliss.policy.tag.auto
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.tag.auto.win.x86/1.0.1' presentationname='com.elsten.bliss.policy.tag.auto.win.x86' symbolicname='com.elsten.bliss.policy.tag.auto.win.x86' uri='com.elsten.bliss.policy.tag.auto.win.x86-1.0.1.jar' version='1.0.1'>
    <size>
      1053296
    </size>
    <capability name='fragment'>
      <p n='host' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='com.elsten.bliss.policy.tag.auto'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.tag.auto.win.x86'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.tag.auto.win.x86'/>
      <p n='version' t='version' v='1.0.1'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=com.elsten.bliss.policy.tag.auto)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host com.elsten.bliss.policy.tag.auto
    </require>
  </resource>
  <resource id='com.elsten.bliss.policy.tag.tagtype/8.0.2' presentationname='com.elsten.bliss.policy.tag.tagtype' symbolicname='com.elsten.bliss.policy.tag.tagtype' uri='com.elsten.bliss.policy.tag.tagtype-8.0.2.jar' version='8.0.2'>
    <size>
      113517
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.policy.tag.tagtype'/>
      <p n='symbolicname' v='com.elsten.bliss.policy.tag.tagtype'/>
      <p n='version' t='version' v='8.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.music.policy.tag.tagtype'/>
      <p n='uses' v='com.elsten.bliss.client,com.elsten.bliss.model,com.elsten.bliss.music.conceptual.model,com.elsten.bliss.music.policy,com.elsten.bliss.platform.activity.model,com.elsten.bliss.platform.storage,scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.client)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.client ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.conceptual.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.conceptual.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.activity.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.activity.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.regexrule.trim/1.0.19.201608171357' presentationname='com.elsten.bliss.regexrule.trim' symbolicname='com.elsten.bliss.regexrule.trim' uri='com.elsten.bliss.regexrule.trim-1.0.19.jar' version='1.0.19.201608171357'>
    <size>
      7874
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.regexrule.trim'/>
      <p n='symbolicname' v='com.elsten.bliss.regexrule.trim'/>
      <p n='version' t='version' v='1.0.19.201608171357'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.bliss.regexrule.trim'/>
      <p n='uses' v='com.elsten.bliss.music.policy.tagsync.regex.rulescript,scala.reflect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.regex.rulescript)(version&gt;=42.1.0)(!(version&gt;=43.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.regex.rulescript
       ;version=[42.1.0,43.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.io)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.io ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.ui/1.0.143' presentationname='com.elsten.bliss.ui' symbolicname='com.elsten.bliss.ui' uri='com.elsten.bliss.ui-1.0.143.jar' version='1.0.143'>
    <size>
      14414806
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.ui'/>
      <p n='symbolicname' v='com.elsten.bliss.ui'/>
      <p n='version' t='version' v='1.0.143'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.filefilter)(version&gt;=1.4.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.filefilter ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.charge.api)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.charge.api ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.client)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.client
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.client.impl)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.client.impl ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.licence)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.licence
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.conceptual.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.conceptual.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.config)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.config ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.coverartpolicy)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.coverartpolicy
       ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.coverartpolicy.assessment)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.coverartpolicy.assessment
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.coverartpolicy.response)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.coverartpolicy.response
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.fileorg)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.fileorg ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.fileorg.pattern)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.fileorg.pattern
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tag.tagtype)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tag.tagtype
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.allowablegenres)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.allowablegenres
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.model
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.regex.rulescript)(version&gt;=42.1.0)(!(version&gt;=43.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.regex.rulescript
       ;version=[42.1.0,43.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.trackartist)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.trackartist
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy.tagsync.tracknumberformat)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy.tagsync.tracknumberformat
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy2)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy2 ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.tagged.mapper.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.tagged.mapper.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.tagged.query)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.tagged.query ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.activity.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.activity.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage.file.util)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage.file.util
       ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.tagindex.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.tagindex.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.util)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.util ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.coverart.lookup.common)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.coverart.lookup.common
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.policy.parsed.regex)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.policy.parsed.regex
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.untagged)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.untagged ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.untagged2)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.untagged2 ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.mapdb)(version&gt;=6.10.0)(!(version&gt;=7.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.mapdb ;version=[6.10.0,7.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.scala)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.scala ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.io)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.io ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.gson)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.gson ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.activation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.activation
    </require>
    <require extend='false' filter='(&amp;(package=javax.naming)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.naming
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet.http ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.validation)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.validation
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.codec.binary)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.codec.binary ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient.util)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient.util ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.output)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.output ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.exception)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.exception ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.time)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.time ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j.spi)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j.spi ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j.xml)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j.xml ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.osgi.boot)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.osgi.boot ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.handler)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.handler ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.webapp)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.webapp ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=[1.5.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.actors)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.actors ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.concurrent)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.concurrent ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.convert)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.convert ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.parallel)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.parallel ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.parallel.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.parallel.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.concurrent)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.concurrent ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.io)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.io ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.math)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.math ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.ref)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.ref ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.sys)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.sys ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.text)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.text ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.control)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.control ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.matching)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.matching ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.parsing.combinator)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.parsing.combinator ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.parsing.input)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.util.parsing.input ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.xml)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.xml ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.xml.dtd)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.xml.dtd ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.xml.factory)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.xml.factory ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.xml.parsing)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.xml.parsing ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.xml.transform)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.xml.transform ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.ui.systemtray/1.0.20' presentationname='com.elsten.bliss.ui.systemtray' symbolicname='com.elsten.bliss.ui.systemtray' uri='com.elsten.bliss.ui.systemtray-1.0.20.jar' version='1.0.20'>
    <size>
      16455
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.ui.systemtray'/>
      <p n='symbolicname' v='com.elsten.bliss.ui.systemtray'/>
      <p n='version' t='version' v='1.0.20'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.main)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.main ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.handler)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.handler ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.untagged.onemusicapi/1.0.19.201608251031' presentationname='com.elsten.bliss.untagged.onemusicapi' symbolicname='com.elsten.bliss.untagged.onemusicapi' uri='com.elsten.bliss.untagged.onemusicapi-1.0.19.jar' version='1.0.19.201608251031'>
    <size>
      47800
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.untagged.onemusicapi'/>
      <p n='symbolicname' v='com.elsten.bliss.untagged.onemusicapi'/>
      <p n='version' t='version' v='1.0.19.201608251031'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.apache.commons.httpclient)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.apache.commons.httpclient
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.client)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.client
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.conceptual.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.conceptual.model
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.info.common)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.info.common ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.activity.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.activity.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.storage.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.storage.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.util)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.util ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.untagged)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.untagged
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.untagged2)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.untagged2 ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.scala)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.scala
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.primitives)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.primitives ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.updater/1.0.21' presentationname='com.elsten.bliss.updater' symbolicname='com.elsten.bliss.updater' uri='com.elsten.bliss.updater-1.0.21.jar' version='1.0.21'>
    <size>
      20609
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.updater'/>
      <p n='symbolicname' v='com.elsten.bliss.updater'/>
      <p n='version' t='version' v='1.0.21'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.osgi)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.osgi ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.bundlerepository)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.bundlerepository ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework.wiring)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework.wiring ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=[1.5.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.bliss.web.debug/1.0.29' presentationname='com.elsten.bliss.web.debug' symbolicname='com.elsten.bliss.web.debug' uri='com.elsten.bliss.web.debug-1.0.29.jar' version='1.0.29'>
    <size>
      38206
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.bliss.web.debug'/>
      <p n='symbolicname' v='com.elsten.bliss.web.debug'/>
      <p n='version' t='version' v='1.0.29'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.client)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.client ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.conceptual.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.conceptual.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.music.policy)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.music.policy ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.model)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.model ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.tagindex.model)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.tagindex.model ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.bliss.platform.util2)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.bliss.platform.util2 ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.google.collections)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.collections ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.lang.management)(version&gt;=6.10.0)(!(version&gt;=7.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.lang.management ;version=[6.10.0,7.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.elsten.util)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.util ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.io)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.io ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet.http ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.filefilter)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.filefilter ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.osgi.boot)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.osgi.boot ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.handler)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.handler ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.webapp)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.webapp ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.google.gson/1.1.0.201608251027' presentationname='com.elsten.google.gson' symbolicname='com.elsten.google.gson' uri='com.elsten.google.gson-1.1.0.jar' version='1.1.0.201608251027'>
    <size>
      17435
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.google.gson'/>
      <p n='symbolicname' v='com.elsten.google.gson'/>
      <p n='version' t='version' v='1.1.0.201608251027'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.google.gson'/>
      <p n='uses' v='com.google.gson,scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.google.gson)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.gson ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.elsten.jetty.osgi.boot/1.0.2' presentationname='com.elsten.jetty.osgi.boot' symbolicname='com.elsten.jetty.osgi.boot' uri='com.elsten.jetty.osgi.boot-1.0.2.jar' version='1.0.2'>
    <size>
      7791
    </size>
    <capability name='fragment'>
      <p n='host' v='org.eclipse.jetty.osgi.boot'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='org.eclipse.jetty.osgi.boot'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.jetty.osgi.boot'/>
      <p n='symbolicname' v='com.elsten.jetty.osgi.boot'/>
      <p n='version' t='version' v='1.0.2'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=org.eclipse.jetty.osgi.boot)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host org.eclipse.jetty.osgi.boot
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.osgi.boot)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.osgi.boot
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.org.jaudiotagger/101.2.0' presentationname='com.elsten.org.jaudiotagger' symbolicname='com.elsten.org.jaudiotagger' uri='com.elsten.org.jaudiotagger-101.2.0.jar' version='101.2.0'>
    <size>
      1113045
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.org.jaudiotagger'/>
      <p n='symbolicname' v='com.elsten.org.jaudiotagger'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.tag'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.aiff'/>
      <p n='uses' v='org.jaudiotagger.audio.aiff.chunk,org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.tag,org.jaudiotagger.tag.aiff'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.aiff.chunk'/>
      <p n='uses' v='org.jaudiotagger.audio.aiff,org.jaudiotagger.audio.iff,org.jaudiotagger.tag.aiff'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.asf'/>
      <p n='uses' v='org.jaudiotagger.audio,org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.tag,org.jaudiotagger.tag.asf'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.asf.data'/>
      <p n='uses' v='org.jaudiotagger.audio.asf.io'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.asf.io'/>
      <p n='uses' v='org.jaudiotagger.audio.asf.data'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.asf.util'/>
      <p n='uses' v='org.jaudiotagger.audio.asf.data,org.jaudiotagger.tag,org.jaudiotagger.tag.asf'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.dsf'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.tag,org.jaudiotagger.tag.id3'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.exceptions'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.flac'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.tag,org.jaudiotagger.tag.flac'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.flac.metadatablock'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions,org.jaudiotagger.tag'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.generic'/>
      <p n='uses' v='org.jaudiotagger.audio,org.jaudiotagger.audio.exceptions,org.jaudiotagger.tag,org.jaudiotagger.tag.images'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.iff'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.mp3'/>
      <p n='uses' v='org.jaudiotagger.audio,org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.logging,org.jaudiotagger.tag,org.jaudiotagger.tag.id3,org.jaudiotagger.tag.reference'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.mp4'/>
      <p n='uses' v='org.jaudiotagger.audio,org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.audio.mp4.atom,org.jaudiotagger.tag,org.jaudiotagger.tag.mp4,org.jaudiotagger.utils.tree'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.mp4.atom'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.ogg'/>
      <p n='uses' v='org.jaudiotagger.audio,org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.audio.ogg.util,org.jaudiotagger.tag'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.ogg.util'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.real'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.tag'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.wav'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.tag,org.jaudiotagger.tag.wav'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.audio.wav.chunk'/>
      <p n='uses' v='org.jaudiotagger.audio.generic,org.jaudiotagger.audio.iff,org.jaudiotagger.tag,org.jaudiotagger.tag.wav'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.logging'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag'/>
      <p n='uses' v='org.jaudiotagger.audio.wav,org.jaudiotagger.tag.id3.framebody,org.jaudiotagger.tag.images,org.jaudiotagger.tag.options,org.jaudiotagger.tag.reference,org.jaudiotagger.tag.vorbiscomment'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.aiff'/>
      <p n='uses' v='org.jaudiotagger.audio.iff,org.jaudiotagger.tag,org.jaudiotagger.tag.id3,org.jaudiotagger.tag.images'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.asf'/>
      <p n='uses' v='org.jaudiotagger.audio.asf.data,org.jaudiotagger.audio.generic,org.jaudiotagger.tag,org.jaudiotagger.tag.images'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.datatype'/>
      <p n='uses' v='org.jaudiotagger.tag,org.jaudiotagger.tag.id3,org.jaudiotagger.tag.id3.framebody'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.flac'/>
      <p n='uses' v='org.jaudiotagger.audio.flac.metadatablock,org.jaudiotagger.tag,org.jaudiotagger.tag.images,org.jaudiotagger.tag.vorbiscomment'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.id3'/>
      <p n='uses' v='org.jaudiotagger.tag,org.jaudiotagger.tag.datatype,org.jaudiotagger.tag.id3.framebody,org.jaudiotagger.tag.images,org.jaudiotagger.tag.lyrics3'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.id3.framebody'/>
      <p n='uses' v='org.jaudiotagger.tag,org.jaudiotagger.tag.datatype,org.jaudiotagger.tag.id3'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.id3.reference'/>
      <p n='uses' v='org.jaudiotagger.tag.reference'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.id3.valuepair'/>
      <p n='uses' v='org.jaudiotagger.tag.datatype'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.images'/>
      <p n='uses' v='org.jaudiotagger.audio.flac.metadatablock'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.lyrics3'/>
      <p n='uses' v='org.jaudiotagger.tag,org.jaudiotagger.tag.datatype,org.jaudiotagger.tag.id3,org.jaudiotagger.tag.id3.framebody'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.mp4'/>
      <p n='uses' v='org.jaudiotagger.audio.generic,org.jaudiotagger.audio.mp4.atom,org.jaudiotagger.tag,org.jaudiotagger.tag.images,org.jaudiotagger.tag.mp4.field,org.jaudiotagger.tag.reference'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.mp4.atom'/>
      <p n='uses' v='org.jaudiotagger.audio.mp4.atom'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.mp4.field'/>
      <p n='uses' v='org.jaudiotagger.audio.mp4.atom,org.jaudiotagger.tag,org.jaudiotagger.tag.mp4'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.options'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.reference'/>
      <p n='uses' v='org.jaudiotagger.tag.datatype'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.vorbiscomment'/>
      <p n='uses' v='org.jaudiotagger.audio.exceptions,org.jaudiotagger.audio.generic,org.jaudiotagger.tag,org.jaudiotagger.tag.images,org.jaudiotagger.tag.reference'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.vorbiscomment.util'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.tag.wav'/>
      <p n='uses' v='org.jaudiotagger.audio.generic,org.jaudiotagger.audio.iff,org.jaudiotagger.audio.wav,org.jaudiotagger.tag,org.jaudiotagger.tag.id3,org.jaudiotagger.tag.images'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.test'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.utils'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.jaudiotagger.utils.tree'/>
      <p n='version' t='version' v='101.2.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.imageio)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio
    </require>
    <require extend='false' filter='(&amp;(package=javax.imageio.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.imageio.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing.filechooser)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing.filechooser
    </require>
    <require extend='false' filter='(&amp;(package=sun.security.action)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package sun.security.action
    </require>
    <require extend='false' filter='(&amp;(package=sun.misc)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package sun.misc
    </require>
    <require extend='false' filter='(&amp;(package=sun.nio.ch)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package sun.nio.ch
    </require>
  </resource>
  <resource id='com.elsten.osgi/1.0.0.201602171038' presentationname='com.elsten.osgi' symbolicname='com.elsten.osgi' uri='com.elsten.osgi-1.0.0.jar' version='1.0.0.201602171038'>
    <size>
      10433
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.osgi'/>
      <p n='symbolicname' v='com.elsten.osgi'/>
      <p n='version' t='version' v='1.0.0.201602171038'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.osgi'/>
      <p n='uses' v='com.google.common.base,com.google.common.collect,org.osgi.framework'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework.wiring)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework.wiring ;version=[1.0.0,2.0.0)
    </require>
  </resource>
  <resource id='com.elsten.util/6.10.0' presentationname='com.elsten.util' symbolicname='com.elsten.util' uri='com.elsten.util-6.10.0.jar' version='6.10.0'>
    <size>
      207418
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.elsten.util'/>
      <p n='symbolicname' v='com.elsten.util'/>
      <p n='version' t='version' v='6.10.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.collections'/>
      <p n='uses' v='com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.google.base'/>
      <p n='uses' v='com.google.common.base'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.google.collections'/>
      <p n='uses' v='com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.lang'/>
      <p n='uses' v='com.elsten.collections,com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.lucene'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.scala'/>
      <p n='uses' v='com.elsten.util,com.google.common.base,scala'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.sparql'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.apache.commons.httpclient'/>
      <p n='uses' v='org.apache.commons.httpclient,org.apache.commons.httpclient.methods'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.concurrent'/>
      <p n='uses' v='com.google.common.base'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.xml'/>
      <p n='uses' v='com.elsten.apache.commons.httpclient,com.elsten.util,com.google.common.base,javax.xml.namespace,javax.xml.parsers,javax.xml.transform,javax.xml.xpath,org.apache.commons.httpclient.methods,org.w3c.dom,org.xml.sax'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.util'/>
      <p n='uses' v='com.google.common.base,com.google.common.collect,javax.xml.namespace,org.apache.commons.httpclient,org.apache.commons.io.filefilter'/>
      <p n='version' t='version' v='1.4.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.mapdb'/>
      <p n='uses' v='org.mapdb'/>
      <p n='version' t='version' v='6.10.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.lang.management'/>
      <p n='uses' v='com.google.common.base'/>
      <p n='version' t='version' v='6.10.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.apache.commons.lang'/>
      <p n='uses' v='org.apache.commons.lang.builder'/>
      <p n='version' t='version' v='6.10.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.jdbm'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.elsten.osgi'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.google.common.base)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.base ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.collect)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.collect ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.io)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.io ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.primitives)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.primitives ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.common.util.concurrent)(version&gt;=12.0.0)(!(version&gt;=13.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.common.util.concurrent ;version=[12.0.0,13.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.sun.management)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.sun.management
    </require>
    <require extend='false' filter='(&amp;(package=javax.management)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.management
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.namespace)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.namespace
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform.dom)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform.dom
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.transform.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.transform.stream
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.xpath)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.xpath
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient.methods)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient.methods ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.httpclient.params)(version&gt;=3.1.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.httpclient.params ;version=[3.1.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.filefilter)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.filefilter ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.lang.builder)(version&gt;=2.6.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.lang.builder ;version=[2.6.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.mapdb)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.mapdb ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.w3c.dom)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.w3c.dom
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.google.gson/1.6.0' presentationname='com.google.gson' symbolicname='com.google.gson' uri='com.google.gson-1.6.0.jar' version='1.6.0'>
    <size>
      164667
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.google.gson'/>
      <p n='symbolicname' v='com.google.gson'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.gson'/>
      <p n='uses' v='com.google.gson.annotations,com.google.gson.stream'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.gson.annotations'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.gson.reflect'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.gson.stream'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
  </resource>
  <resource id='com.google.guava/12.0.1' presentationname='Guava: Google Core Libraries for Java' symbolicname='com.google.guava' uri='com.google.guava-12.0.1.jar' version='12.0.1'>
    <description>
      Guava is a suite of core and expanded libraries that include
          utility classes, google's collections, io classes, and
       much    much more.    Guava has only one code dependency -
       javax.annotation,    per the JSR-305 spec.
    </description>
    <size>
      1795932
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Guava: Google Core Libraries for Java'/>
      <p n='symbolicname' v='com.google.guava'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.net'/>
      <p n='uses' v='com.google.common.base,javax.annotation,com.google.common.hash,com.google.common.io,com.google.common.primitives,com.google.common.collect'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.collect'/>
      <p n='uses' v='com.google.common.base,javax.annotation,com.google.common.primitives,com.google.common.math'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.primitives'/>
      <p n='uses' v='javax.annotation,com.google.common.base,sun.misc'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.base'/>
      <p n='uses' v='javax.annotation'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.cache'/>
      <p n='uses' v='com.google.common.collect,com.google.common.util.concurrent,javax.annotation,com.google.common.base,com.google.common.primitives'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.eventbus'/>
      <p n='uses' v='com.google.common.collect,com.google.common.base,com.google.common.cache'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.util.concurrent'/>
      <p n='uses' v='com.google.common.base,javax.annotation,com.google.common.collect'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.hash'/>
      <p n='uses' v='com.google.common.base,com.google.common.math,com.google.common.primitives,javax.annotation'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.io'/>
      <p n='uses' v='com.google.common.hash,com.google.common.base,javax.annotation,com.google.common.primitives'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.reflect'/>
      <p n='uses' v='javax.annotation,com.google.common.base,com.google.common.collect'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.math'/>
      <p n='uses' v='com.google.common.base,javax.annotation'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.google.common.annotations'/>
      <p n='version' t='version' v='12.0.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.annotation)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.annotation
    </require>
    <require extend='false' filter='(&amp;(package=sun.misc)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package sun.misc
    </require>
  </resource>
  <resource id='com.onemusicapi.client/11.0.1' presentationname='com.onemusicapi.client' symbolicname='com.onemusicapi.client' uri='com.onemusicapi.client-11.0.1.jar' version='11.0.1'>
    <size>
      80708
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.onemusicapi.client'/>
      <p n='symbolicname' v='com.onemusicapi.client'/>
      <p n='version' t='version' v='11.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.onemusicapi'/>
      <p n='uses' v='com.google.gson,com.google.gson.stream,com.onemusicapi.common.v20140925,com.onemusicapi.util,org.apache.log4j,scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime,scala.util'/>
      <p n='version' t='version' v='11.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.onemusicapi.util'/>
      <p n='uses' v='com.google.gson,com.onemusicapi.common.v20140925,org.apache.log4j,scala.reflect'/>
      <p n='version' t='version' v='11.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.onemusicapi'/>
      <p n='version' t='version' v='11.0.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.elsten.google.gson)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.elsten.google.gson ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.gson)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.gson ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.google.gson.stream)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.google.gson.stream ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=com.onemusicapi.common.v20140925)(version&gt;=3.0.0)(!(version&gt;=4.0.0)))' multiple='false' name='package' optional='false'>
      Import package com.onemusicapi.common.v20140925 ;version=[3.0.0,4.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala
    </require>
    <require extend='false' filter='(&amp;(package=scala.actors)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.actors
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.collection
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable
    </require>
    <require extend='false' filter='(&amp;(package=scala.io)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.io
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.reflect
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.runtime
    </require>
    <require extend='false' filter='(&amp;(package=scala.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.util
    </require>
  </resource>
  <resource id='com.onemusicapi.common/3.0.3' presentationname='com.onemusicapi.common' symbolicname='com.onemusicapi.common' uri='com.onemusicapi.common-3.0.3.jar' version='3.0.3'>
    <size>
      209192
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.onemusicapi.common'/>
      <p n='symbolicname' v='com.onemusicapi.common'/>
      <p n='version' t='version' v='3.0.3'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.onemusicapi.common.v20130307'/>
      <p n='uses' v='scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime'/>
      <p n='version' t='version' v='3.0.3'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.onemusicapi.common.v20140520'/>
      <p n='uses' v='scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime'/>
      <p n='version' t='version' v='3.0.3'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.onemusicapi.common.v20140925'/>
      <p n='uses' v='scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime'/>
      <p n='version' t='version' v='3.0.3'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.onemusicapi.common.v20150623'/>
      <p n='uses' v='scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime'/>
      <p n='version' t='version' v='3.0.3'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.onemusicapi.common.v20151208'/>
      <p n='uses' v='scala,scala.collection,scala.collection.immutable,scala.reflect,scala.runtime'/>
      <p n='version' t='version' v='3.0.3'/>
    </capability>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.reflect ;version=[2.10.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=2.10.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package scala.runtime ;version=[2.10.0,3.0.0)
    </require>
  </resource>
  <resource id='com.stripe/1.0.0' presentationname='com.stripe' symbolicname='com.stripe' uri='com.stripe-1.0.0.jar' version='1.0.0'>
    <size>
      70997
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.stripe'/>
      <p n='symbolicname' v='com.stripe'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.stripe'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.stripe.exception'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.stripe.model'/>
      <p n='uses' v='com.google.gson,com.stripe.exception,com.stripe.net'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.stripe.net'/>
      <p n='uses' v='com.google.gson,com.stripe.exception,com.stripe.model'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=com.google.gson)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package com.google.gson
    </require>
    <require extend='false' filter='(&amp;(package=javax.net.ssl)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.net.ssl
    </require>
  </resource>
  <resource id='com.sun.jna/3.2.1.b0' presentationname='com.sun.jna' symbolicname='com.sun.jna' uri='com.sun.jna-3.2.1.jar' version='3.2.1.b0'>
    <size>
      1144400
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='com.sun.jna'/>
      <p n='symbolicname' v='com.sun.jna'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.examples'/>
      <p n='uses' v='javax.swing,javax.swing.event,javax.swing.border,com.sun.jna,com.sun.jna.examples.win32,com.sun.jna.examples.unix,com.sun.jna.ptr'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.examples.dnd'/>
      <p n='uses' v='javax.swing.text,javax.swing,com.sun.jna.examples'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.examples.unix'/>
      <p n='uses' v='com.sun.jna,com.sun.jna.ptr'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.examples.win32'/>
      <p n='uses' v='com.sun.jna,com.sun.jna.ptr,com.sun.jna.win32'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.darwin'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.freebsd-amd64'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.freebsd-i386'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.linux-amd64'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.linux-i386'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.ptr'/>
      <p n='uses' v='com.sun.jna'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.sunos-amd64'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.sunos-sparc'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.sunos-sparcv9'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.sunos-x86'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.win32'/>
      <p n='uses' v='com.sun.jna'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.win32-amd64'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='com.sun.jna.win32-x86'/>
      <p n='version' t='version' v='3.2.1.b0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.swing)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing.border)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing.border
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing.event)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing.event
    </require>
    <require extend='false' filter='(&amp;(package=javax.swing.text)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.swing.text
    </require>
  </resource>
  <resource id='javax.servlet/2.5.0.v201103041518' presentationname='Servlet API Bundle' symbolicname='javax.servlet' uri='javax.servlet-2.5.0.jar' version='2.5.0.v201103041518'>
    <size>
      119303
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Servlet API Bundle'/>
      <p n='symbolicname' v='javax.servlet'/>
      <p n='version' t='version' v='2.5.0.v201103041518'/>
    </capability>
    <capability name='package'>
      <p n='package' v='javax.servlet'/>
      <p n='version' t='version' v='2.5.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='javax.servlet.http'/>
      <p n='version' t='version' v='2.5.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='javax.servlet.resources'/>
      <p n='version' t='version' v='2.5.0'/>
    </capability>
    <require extend='false' filter='(|(ee=CDC-1.1/Foundation-1.1)(ee=J2SE-1.4))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=CDC-1.1/Foundation-1.1)(ee=J2SE-1.4))
    </require>
  </resource>
  <resource id='log4j/1.2.17' presentationname='Apache Log4j' symbolicname='log4j' uri='log4j-1.2.17.jar' version='1.2.17'>
    <description>
      Apache Log4j 1.2
    </description>
    <size>
      489884
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://logging.apache.org/log4j/1.2
    </documentation>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Log4j'/>
      <p n='symbolicname' v='log4j'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.net'/>
      <p n='uses' v='org.apache.log4j,org.apache.log4j.spi,javax.naming,org.apache.log4j.helpers,javax.jms,org.apache.log4j.xml,javax.mail,javax.mail.internet,org.w3c.dom,javax.jmdns'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.jmx'/>
      <p n='uses' v='org.apache.log4j,javax.management,org.apache.log4j.helpers,org.apache.log4j.spi'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.jdbc'/>
      <p n='uses' v='org.apache.log4j,org.apache.log4j.spi'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.config'/>
      <p n='uses' v='org.apache.log4j.helpers,org.apache.log4j,org.apache.log4j.spi'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.helpers'/>
      <p n='uses' v='org.apache.log4j,org.apache.log4j.spi,org.apache.log4j.pattern'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j'/>
      <p n='uses' v='org.apache.log4j.spi,org.apache.log4j.helpers,org.apache.log4j.pattern,org.apache.log4j.or,org.apache.log4j.config'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.or.jms'/>
      <p n='uses' v='org.apache.log4j.helpers,javax.jms,org.apache.log4j.or'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.nt'/>
      <p n='uses' v='org.apache.log4j.helpers,org.apache.log4j,org.apache.log4j.spi'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.or.sax'/>
      <p n='uses' v='org.apache.log4j.or,org.xml.sax'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.pattern'/>
      <p n='uses' v='org.apache.log4j.helpers,org.apache.log4j.spi,org.apache.log4j,org.apache.log4j.or'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.spi'/>
      <p n='uses' v='org.apache.log4j,org.apache.log4j.helpers,org.apache.log4j.or'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.rewrite'/>
      <p n='uses' v='org.apache.log4j,org.apache.log4j.spi,org.apache.log4j.helpers,org.apache.log4j.xml,org.w3c.dom'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.or'/>
      <p n='uses' v='org.apache.log4j.helpers,org.apache.log4j.spi,org.apache.log4j'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.xml'/>
      <p n='uses' v='javax.xml.parsers,org.w3c.dom,org.xml.sax,org.apache.log4j.config,org.apache.log4j.helpers,org.apache.log4j,org.apache.log4j.spi,org.apache.log4j.or'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.log4j.varia'/>
      <p n='uses' v='org.apache.log4j.spi,org.apache.log4j,org.apache.log4j.helpers'/>
      <p n='version' t='version' v='1.2.17'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.jmdns)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.jmdns
    </require>
    <require extend='false' filter='(&amp;(package=javax.jms)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.jms
    </require>
    <require extend='false' filter='(&amp;(package=javax.mail)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.mail
    </require>
    <require extend='false' filter='(&amp;(package=javax.mail.internet)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.mail.internet
    </require>
    <require extend='false' filter='(&amp;(package=javax.management)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.management
    </require>
    <require extend='false' filter='(&amp;(package=javax.naming)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.naming
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=org.w3c.dom)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.w3c.dom
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax.helpers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax.helpers
    </require>
  </resource>
  <resource id='org.apache.commons.codec/1.6.0' presentationname='Commons Codec' symbolicname='org.apache.commons.codec' uri='org.apache.commons.codec-1.6.0.jar' version='1.6.0'>
    <description>
      The codec package contains simple encoder and decoders for
           various formats such as Base64 and Hexadecimal.  In addition
       to these     widely used encoders and decoders, the codec
       package also maintains a     collection of phonetic encoding
       utilities.
    </description>
    <size>
      232771
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://commons.apache.org/codec/
    </documentation>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Commons Codec'/>
      <p n='symbolicname' v='org.apache.commons.codec'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.codec'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.codec.net'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.codec.language.bm'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.codec.language'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.codec.digest'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.codec.binary'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
  </resource>
  <resource id='org.apache.commons.collections/3.2.1' presentationname='Commons Collections' symbolicname='org.apache.commons.collections' uri='org.apache.commons.collections-3.2.1.jar' version='3.2.1'>
    <description>
      Types that extend and augment the Java Collections Framework.
    </description>
    <size>
      575389
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://commons.apache.org/collections/
    </documentation>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Commons Collections'/>
      <p n='symbolicname' v='org.apache.commons.collections'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.map'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.buffer'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.comparators'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.collection'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.bag'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.iterators'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.bidimap'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.set'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.functors'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.list'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections.keyvalue'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.collections'/>
      <p n='version' t='version' v='3.2.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.bag)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.bag ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.bidimap)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.bidimap ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.buffer)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.buffer ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.collection)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.collection ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.comparators)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.comparators ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.functors)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.functors ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.iterators)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.iterators ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.keyvalue)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.keyvalue ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.list)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.list ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.map)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.map ;version=3.2.1
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.collections.set)(version&gt;=3.2.1))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.collections.set ;version=3.2.1
    </require>
  </resource>
  <resource id='org.apache.commons.httpclient/3.1.0' presentationname='org.apache.commons.httpclient' symbolicname='org.apache.commons.httpclient' uri='org.apache.commons.httpclient-3.1.0.jar' version='3.1.0'>
    <size>
      304202
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='org.apache.commons.httpclient'/>
      <p n='symbolicname' v='org.apache.commons.httpclient'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.httpclient'/>
      <p n='uses' v='org.apache.commons.logging,org.apache.commons.httpclient.params,org.apache.commons.httpclient.util,org.apache.commons.httpclient.protocol,org.apache.commons.httpclient.cookie,org.apache.commons.httpclient.auth,org.apache.commons.codec,org.apache.commons.codec.net'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.httpclient.auth'/>
      <p n='uses' v='org.apache.commons.httpclient.util,org.apache.commons.httpclient,org.apache.commons.logging,org.apache.commons.httpclient.params,org.apache.commons.codec.binary,javax.crypto.spec,javax.crypto'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.httpclient.cookie'/>
      <p n='uses' v='org.apache.commons.httpclient,org.apache.commons.logging,org.apache.commons.httpclient.util'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.httpclient.methods'/>
      <p n='uses' v='org.apache.commons.httpclient,org.apache.commons.logging,org.apache.commons.httpclient.params,org.apache.commons.httpclient.methods.multipart,org.apache.commons.httpclient.util'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.httpclient.methods.multipart'/>
      <p n='uses' v='org.apache.commons.logging,org.apache.commons.httpclient.util,org.apache.commons.httpclient.methods,org.apache.commons.httpclient.params'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.httpclient.params'/>
      <p n='uses' v='org.apache.commons.logging,org.apache.commons.httpclient'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.httpclient.protocol'/>
      <p n='uses' v='org.apache.commons.httpclient.util,org.apache.commons.httpclient,org.apache.commons.httpclient.params,javax.net,javax.net.ssl'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.httpclient.util'/>
      <p n='uses' v='org.apache.commons.logging,org.apache.commons.codec.net,org.apache.commons.httpclient,org.apache.commons.codec'/>
      <p n='version' t='version' v='3.1.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.crypto)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.crypto
    </require>
    <require extend='false' filter='(&amp;(package=javax.crypto.spec)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.crypto.spec
    </require>
    <require extend='false' filter='(&amp;(package=javax.net)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.net
    </require>
    <require extend='false' filter='(&amp;(package=javax.net.ssl)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.net.ssl
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.codec)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.codec
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.codec.binary)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.codec.binary
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.codec.net)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.codec.net
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.logging)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.logging
    </require>
  </resource>
  <resource id='org.apache.commons.io/1.4.0' presentationname='Apache Commons IO Bundle' symbolicname='org.apache.commons.io' uri='org.apache.commons.io-1.4.0.jar' version='1.4.0'>
    <size>
      109043
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Commons IO Bundle'/>
      <p n='symbolicname' v='org.apache.commons.io'/>
      <p n='version' t='version' v='1.4.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.io'/>
      <p n='version' t='version' v='1.4.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.io.comparator'/>
      <p n='version' t='version' v='1.4.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.io.filefilter'/>
      <p n='version' t='version' v='1.4.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.io.input'/>
      <p n='version' t='version' v='1.4.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.io.output'/>
      <p n='version' t='version' v='1.4.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io)(version&gt;=1.4.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.comparator)(version&gt;=1.4.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.comparator ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.filefilter)(version&gt;=1.4.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.filefilter ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.input)(version&gt;=1.4.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.input ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.commons.io.output)(version&gt;=1.4.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.commons.io.output ;version=1.4.0
    </require>
  </resource>
  <resource id='org.apache.commons.lang/2.6.0' presentationname='Commons Lang' symbolicname='org.apache.commons.lang' uri='org.apache.commons.lang-2.6.0.jar' version='2.6.0'>
    <description>
      Commons Lang, a package of Java utility classes for the   
           classes that are in java.lang's hierarchy, or are considered
       to be so        standard as to justify existence in java.lang.
    </description>
    <size>
      284220
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://commons.apache.org/lang/
    </documentation>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Commons Lang'/>
      <p n='symbolicname' v='org.apache.commons.lang'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.enum'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.enums'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.builder'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.time'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.exception'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.mutable'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.text'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.reflect'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang.math'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.lang'/>
      <p n='version' t='version' v='2.6.0'/>
    </capability>
  </resource>
  <resource id='org.apache.commons.logging/1.0.4' presentationname='org.apache.commons.logging' symbolicname='org.apache.commons.logging' uri='org.apache.commons.logging-1.0.4.jar' version='1.0.4'>
    <size>
      33760
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='org.apache.commons.logging'/>
      <p n='symbolicname' v='org.apache.commons.logging'/>
      <p n='version' t='version' v='1.0.4'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.logging'/>
      <p n='uses' v='org.apache.commons.logging.impl'/>
      <p n='version' t='version' v='1.0.4'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.commons.logging.impl'/>
      <p n='uses' v='org.apache.commons.logging'/>
      <p n='version' t='version' v='1.0.4'/>
    </capability>
  </resource>
  <resource id='org.apache.felix.bundlerepository/1.6.7.SNAPSHOT' presentationname='Apache Felix Bundle Repository' symbolicname='org.apache.felix.bundlerepository' uri='org.apache.felix.bundlerepository-1.6.7.jar' version='1.6.7.SNAPSHOT'>
    <description>
      Bundle repository service.
    </description>
    <size>
      172110
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://felix.apache.org/site/apache-felix-osgi-bundle-repository.html
    </documentation>
    <source>
      http://felix.apache.org/site/downloads.cgi
    </source>
    <capability name='service'>
      <p n='service' v='org.apache.felix.bundlerepository.RepositoryAdmin'/>
    </capability>
    <capability name='service'>
      <p n='service' v='org.osgi.service.obr.RepositoryAdmin'/>
    </capability>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Bundle Repository'/>
      <p n='symbolicname' v='org.apache.felix.bundlerepository'/>
      <p n='version' t='version' v='1.6.7.SNAPSHOT'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.bundlerepository'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='2.0.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.xml.stream)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.xml.stream
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.felix.bundlerepository)(version&gt;=2.0.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.apache.felix.bundlerepository ;version=[2.0.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.log)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.log ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.obr)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.obr ;version=[1.0.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.url)(version&gt;=1.0.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.url ;version=[1.0.0,2.0.0)
    </require>
  </resource>
  <resource id='org.apache.felix.scr/1.6.0' presentationname='Apache Felix Declarative Services' symbolicname='org.apache.felix.scr' uri='org.apache.felix.scr-1.6.0.jar' version='1.6.0'>
    <description>
      Implementation of the Declarative Services specification 1.1
    </description>
    <size>
      192368
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0.txt
    </license>
    <documentation>
      http://felix.apache.org/site/apache-felix-service-component-runtime.html
    </documentation>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Apache Felix Declarative Services'/>
      <p n='symbolicname' v='org.apache.felix.scr'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.apache.felix.scr'/>
      <p n='uses' v='org.osgi.framework,org.osgi.service.component'/>
      <p n='version' t='version' v='1.6.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.component'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.apache.felix.shell)(version&gt;=1.0.0))' multiple='false' name='package' optional='true'>
      Import package org.apache.felix.shell ;version=1.0.0
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.4.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.4.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.cm)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.cm ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.component)(version&gt;=1.1.0)(!(version&gt;=1.2.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.component ;version=[1.1.0,1.2.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.log)(version&gt;=1.3.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.log ;version=[1.3.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.metatype)(version&gt;=1.1.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.metatype ;version=[1.1.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.packageadmin)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.osgi.service.packageadmin ;version=[1.2.0,2.0.0)
    </require>
  </resource>
  <resource id='org.eclipse.jetty.continuation/7.6.1.v20120215' presentationname='Jetty :: Continuation' symbolicname='org.eclipse.jetty.continuation' uri='org.eclipse.jetty.continuation-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Asynchronous API
    </description>
    <size>
      20183
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: Continuation'/>
      <p n='symbolicname' v='org.eclipse.jetty.continuation'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.continuation'/>
      <p n='uses' v='javax.servlet,org.mortbay.log,org.mortbay.util.ajax'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0)(!(version&gt;=3.1.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=[2.5.0,3.1.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.mortbay.log)(version&gt;=6.1.0)(!(version&gt;=7.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.mortbay.log ;version=[6.1.0,7.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.mortbay.util.ajax)(version&gt;=6.1.0)(!(version&gt;=7.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.mortbay.util.ajax ;version=[6.1.0,7.0.0)
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.deploy/7.6.1.v20120215' presentationname='Jetty :: Deployers' symbolicname='org.eclipse.jetty.deploy' uri='org.eclipse.jetty.deploy-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Jetty deployers
    </description>
    <size>
      58320
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: Deployers'/>
      <p n='symbolicname' v='org.eclipse.jetty.deploy'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.deploy.bindings'/>
      <p n='uses' v='org.eclipse.jetty.server.handler,org.eclipse.jetty.deploy.graph,org.eclipse.jetty.util.log,org.eclipse.jetty.deploy,org.eclipse.jetty.webapp,org.eclipse.jetty.util.resource,org.eclipse.jetty.xml,org.eclipse.jetty.server'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.deploy.providers'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.server.handler,org.eclipse.jetty.deploy.util,org.eclipse.jetty.util.resource,org.eclipse.jetty.deploy,org.eclipse.jetty.xml,org.eclipse.jetty.util,org.eclipse.jetty.util.component,org.eclipse.jetty.util.log,org.eclipse.jetty.webapp'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.deploy.jmx'/>
      <p n='uses' v='org.eclipse.jetty.server.handler,org.eclipse.jetty.jmx,org.eclipse.jetty.deploy.graph,org.eclipse.jetty.deploy'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.deploy.graph'/>
      <p n='uses' v='org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.deploy.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.deploy'/>
      <p n='uses' v='org.eclipse.jetty.server.handler,org.eclipse.jetty.util,org.eclipse.jetty.deploy.graph,org.eclipse.jetty.util.log,org.eclipse.jetty.util.component,org.eclipse.jetty.server,org.eclipse.jetty.util.resource,org.eclipse.jetty.xml,org.eclipse.jetty.deploy.bindings,org.eclipse.jetty.webapp'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.deploy.providers.jmx'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.jmx)(version&gt;=7.3.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.jmx ;version=[7.3.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.handler)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.handler ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.component)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.component ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.resource)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.resource ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.webapp)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.webapp ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.xml)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.xml ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.http/7.6.1.v20120215' presentationname='Jetty :: Http Utility' symbolicname='org.eclipse.jetty.http' uri='org.eclipse.jetty.http-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Administrative parent pom for Jetty modules
    </description>
    <size>
      90035
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: Http Utility'/>
      <p n='symbolicname' v='org.eclipse.jetty.http'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.http.ssl'/>
      <p n='uses' v='org.eclipse.jetty.util.ssl'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.http'/>
      <p n='uses' v='org.eclipse.jetty.io,org.eclipse.jetty.util.log,org.eclipse.jetty.util,org.eclipse.jetty.util.component,org.eclipse.jetty.util.resource,org.eclipse.jetty.io.bio'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.http.gzip'/>
      <p n='uses' v='javax.servlet,org.eclipse.jetty.util,javax.servlet.http'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet.http ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.io)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.io ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.io.bio)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.io.bio ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.component)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.component ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.resource)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.resource ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.ssl)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.ssl ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.io/7.6.1.v20120215' presentationname='Jetty :: IO Utility' symbolicname='org.eclipse.jetty.io' uri='org.eclipse.jetty.io-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Administrative parent pom for Jetty modules
    </description>
    <size>
      96418
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: IO Utility'/>
      <p n='symbolicname' v='org.eclipse.jetty.io'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.io.nio'/>
      <p n='uses' v='org.eclipse.jetty.io,org.eclipse.jetty.util.log,org.eclipse.jetty.util.thread,org.eclipse.jetty.util.component,org.eclipse.jetty.util,javax.net.ssl'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.io.bio'/>
      <p n='uses' v='javax.net.ssl,org.eclipse.jetty.util.log,org.eclipse.jetty.io'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.io'/>
      <p n='uses' v='org.eclipse.jetty.util.log,org.eclipse.jetty.util,org.eclipse.jetty.io.nio,org.eclipse.jetty.util.thread'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.net.ssl)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.net.ssl
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.component)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.component ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.thread)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.thread ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.osgi.boot/7.6.1.v20120215' presentationname='Jetty :: OSGi :: Boot' symbolicname='org.eclipse.jetty.osgi.boot' uri='org.eclipse.jetty.osgi.boot-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Jetty OSGi Boot bundle
    </description>
    <size>
      82742
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: OSGi :: Boot'/>
      <p n='symbolicname' v='org.eclipse.jetty.osgi.boot'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.osgi.boot'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.osgi.boot.utils'/>
      <p n='version' t='version' v='7.4.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.osgi.nested'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.mail)(version&gt;=1.4.0))' multiple='false' name='package' optional='true'>
      Import package javax.mail ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=javax.mail.event)(version&gt;=1.4.0))' multiple='false' name='package' optional='true'>
      Import package javax.mail.event ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=javax.mail.internet)(version&gt;=1.4.0))' multiple='false' name='package' optional='true'>
      Import package javax.mail.internet ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=javax.mail.search)(version&gt;=1.4.0))' multiple='false' name='package' optional='true'>
      Import package javax.mail.search ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=javax.mail.util)(version&gt;=1.4.0))' multiple='false' name='package' optional='true'>
      Import package javax.mail.util ;version=1.4.0
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=2.5.0
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=2.5.0))' multiple='false' name='package' optional='false'>
      Import package javax.servlet.http ;version=2.5.0
    </require>
    <require extend='false' filter='(&amp;(package=javax.transaction)(version&gt;=1.1.0))' multiple='false' name='package' optional='true'>
      Import package javax.transaction ;version=1.1.0
    </require>
    <require extend='false' filter='(&amp;(package=javax.transaction.xa)(version&gt;=1.1.0))' multiple='false' name='package' optional='true'>
      Import package javax.transaction.xa ;version=1.1.0
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.deploy)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.deploy ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.deploy.providers)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.deploy.providers ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.nested)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.nested ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.handler)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.handler ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.component)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.component ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.resource)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.resource ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.webapp)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.webapp ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.xml)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.xml ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=1.5.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.framework ;version=[1.5.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.cm)(version&gt;=1.2.0))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.cm ;version=1.2.0
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.packageadmin)(version&gt;=1.2.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.packageadmin ;version=[1.2.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.startlevel)(version&gt;=1.0.0.o))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.startlevel ;version=1.0.0.o
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.service.url)(version&gt;=1.0.0))' multiple='false' name='package' optional='false'>
      Import package org.osgi.service.url ;version=1.0.0
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.util.tracker)(version&gt;=1.3.0))' multiple='false' name='package' optional='false'>
      Import package org.osgi.util.tracker ;version=1.3.0
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package org.slf4j
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.helpers)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package org.slf4j.helpers
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.spi)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package org.slf4j.spi
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax.helpers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax.helpers
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.security/7.6.1.v20120215' presentationname='Jetty :: Security' symbolicname='org.eclipse.jetty.security' uri='org.eclipse.jetty.security-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Jetty security infrastructure
    </description>
    <size>
      83409
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: Security'/>
      <p n='symbolicname' v='org.eclipse.jetty.security'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.security'/>
      <p n='uses' v='javax.servlet,org.eclipse.jetty.server,org.eclipse.jetty.util.security,org.eclipse.jetty.http,org.eclipse.jetty.util,javax.servlet.http,org.eclipse.jetty.security.authentication,javax.security.auth,org.eclipse.jetty.util.resource,org.eclipse.jetty.util.log,org.eclipse.jetty.util.component,org.eclipse.jetty.server.handler,org.ietf.jgss'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.security.authentication'/>
      <p n='uses' v='javax.servlet,org.eclipse.jetty.server,org.eclipse.jetty.security,javax.servlet.http,org.eclipse.jetty.util,org.eclipse.jetty.util.security,org.eclipse.jetty.util.log,javax.security.auth'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.security.auth)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.security.auth
    </require>
    <require extend='false' filter='(&amp;(package=javax.security.cert)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.security.cert
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet.http ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.http)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.http ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.handler)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.handler ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.component)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.component ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.resource)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.resource ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.security)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.security ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.ietf.jgss)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.ietf.jgss
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.server/7.6.1.v20120215' presentationname='Jetty :: Server Core' symbolicname='org.eclipse.jetty.server' uri='org.eclipse.jetty.server-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      The core jetty server artifact.
    </description>
    <size>
      309389
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: Server Core'/>
      <p n='symbolicname' v='org.eclipse.jetty.server'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server'/>
      <p n='uses' v='org.eclipse.jetty.io,org.eclipse.jetty.util.log,org.eclipse.jetty.util.statistic,org.eclipse.jetty.http,org.eclipse.jetty.util.thread,org.eclipse.jetty.util.component,org.eclipse.jetty.server.ssl,org.eclipse.jetty.server.nio,org.eclipse.jetty.util.resource,org.eclipse.jetty.util,javax.servlet,org.eclipse.jetty.continuation,org.eclipse.jetty.server.handler,org.eclipse.jetty.io.nio,javax.servlet.http,org.eclipse.jetty.server.session,javax.security.auth'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.nio'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.io,org.eclipse.jetty.http,org.eclipse.jetty.util.log,org.eclipse.jetty.io.nio,org.eclipse.jetty.util.thread,org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.handler'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.util.component,org.eclipse.jetty.util.log,org.eclipse.jetty.util,org.eclipse.jetty.io.nio,org.eclipse.jetty.io,org.eclipse.jetty.util.thread,org.eclipse.jetty.http,javax.servlet,javax.servlet.http,org.eclipse.jetty.util.resource,org.eclipse.jetty.http.gzip,org.eclipse.jetty.continuation,org.eclipse.jetty.util.statistic'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.nio.jmx'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.session.jmx'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.server.handler.jmx,org.eclipse.jetty.server.handler,org.eclipse.jetty.server.session'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.jmx'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.server.handler,org.eclipse.jetty.jmx'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.ssl'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.io,javax.security.cert,javax.net.ssl,org.eclipse.jetty.util.log,org.eclipse.jetty.util,org.eclipse.jetty.util.ssl,org.eclipse.jetty.io.nio,org.eclipse.jetty.server.nio,org.eclipse.jetty.server.bio,org.eclipse.jetty.io.bio'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.handler.jmx'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.server.handler,org.eclipse.jetty.jmx,org.eclipse.jetty.util.resource,org.eclipse.jetty.util.log,org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.session'/>
      <p n='uses' v='javax.servlet,org.eclipse.jetty.server,org.eclipse.jetty.server.handler,org.eclipse.jetty.util.log,javax.servlet.http,org.eclipse.jetty.util.component,org.eclipse.jetty.util.statistic,org.eclipse.jetty.http,org.eclipse.jetty.util,javax.naming,javax.sql'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.server.bio'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.io.bio,org.eclipse.jetty.io,org.eclipse.jetty.http,org.eclipse.jetty.util.thread,org.eclipse.jetty.util.log,org.eclipse.jetty.util.component'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.naming)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.naming
    </require>
    <require extend='false' filter='(&amp;(package=javax.net.ssl)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.net.ssl
    </require>
    <require extend='false' filter='(&amp;(package=javax.security.auth)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.security.auth
    </require>
    <require extend='false' filter='(&amp;(package=javax.security.cert)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.security.cert
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet.http ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.sql)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.sql
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.continuation)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.continuation ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.http)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.http ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.http.gzip)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.http.gzip ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.io)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.io ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.io.bio)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.io.bio ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.io.nio)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.io.nio ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.jmx)(version&gt;=7.3.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.jmx ;version=[7.3.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.component)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.component ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.resource)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.resource ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.ssl)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.ssl ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.statistic)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.statistic ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.thread)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.thread ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.servlet/7.6.1.v20120215' presentationname='Jetty :: Servlet Handling' symbolicname='org.eclipse.jetty.servlet' uri='org.eclipse.jetty.servlet-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Jetty Servlet Container
    </description>
    <size>
      87464
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: Servlet Handling'/>
      <p n='symbolicname' v='org.eclipse.jetty.servlet'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.servlet'/>
      <p n='uses' v='org.eclipse.jetty.server,org.eclipse.jetty.io,org.eclipse.jetty.http,org.eclipse.jetty.server.nio,org.eclipse.jetty.server.handler,org.eclipse.jetty.util.resource,javax.servlet,org.eclipse.jetty.server.ssl,org.eclipse.jetty.util.log,org.eclipse.jetty.util,javax.servlet.http,org.eclipse.jetty.servlet.api,org.eclipse.jetty.util.component,org.eclipse.jetty.security,org.eclipse.jetty.server.session,org.eclipse.jetty.continuation'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.servlet.jmx'/>
      <p n='uses' v='org.eclipse.jetty.servlet,org.eclipse.jetty.jmx'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.servlet.listener'/>
      <p n='uses' v='javax.servlet,org.eclipse.jetty.util.log,org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.servlet.api'/>
      <p n='uses' v='org.eclipse.jetty.server'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet.http ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.continuation)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.continuation ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.http)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.http ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.io)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.io ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.jmx)(version&gt;=7.3.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.jmx ;version=[7.3.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.security)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.security ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.handler)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.handler ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.nio)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.nio ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.session)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.session ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.ssl)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.ssl ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.component)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.component ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.resource)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.eclipse.jetty.util.resource ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.util/7.6.1.v20120215' presentationname='Jetty :: Utilities' symbolicname='org.eclipse.jetty.util' uri='org.eclipse.jetty.util-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Utility classes for Jetty
    </description>
    <size>
      247390
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: Utilities'/>
      <p n='symbolicname' v='org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util.security'/>
      <p n='uses' v='org.eclipse.jetty.util,org.eclipse.jetty.util.resource,org.eclipse.jetty.util.log'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util.statistic'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util.thread'/>
      <p n='uses' v='org.eclipse.jetty.util.component,org.eclipse.jetty.util.log,org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util.component'/>
      <p n='uses' v='org.eclipse.jetty.util.log,org.eclipse.jetty.util,org.eclipse.jetty.util.resource'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util.resource'/>
      <p n='uses' v='org.eclipse.jetty.util.log,org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util.log'/>
      <p n='uses' v='org.slf4j.spi,org.slf4j.helpers,org.slf4j,org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util.ssl'/>
      <p n='uses' v='javax.net.ssl,org.eclipse.jetty.util.security,org.eclipse.jetty.util.component,org.eclipse.jetty.util.resource,org.eclipse.jetty.util.log,org.eclipse.jetty.util'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util'/>
      <p n='uses' v='org.eclipse.jetty.util.log,org.eclipse.jetty.util.thread,org.eclipse.jetty.util.component'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.util.ajax'/>
      <p n='uses' v='org.eclipse.jetty.util,org.eclipse.jetty.util.log'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.net.ssl)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.net.ssl
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.5.0)(!(version&gt;=1.7.0)))' multiple='false' name='package' optional='true'>
      Import package org.slf4j ;version=[1.5.0,1.7.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.helpers)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.slf4j.helpers ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.impl)(version&gt;=1.5.0)(!(version&gt;=1.7.0)))' multiple='false' name='package' optional='true'>
      Import package org.slf4j.impl ;version=[1.5.0,1.7.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.spi)(version&gt;=1.6.0)(!(version&gt;=2.0.0)))' multiple='false' name='package' optional='true'>
      Import package org.slf4j.spi ;version=[1.6.0,2.0.0)
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.webapp/7.6.1.v20120215' presentationname='Jetty :: Webapp Application Support' symbolicname='org.eclipse.jetty.webapp' uri='org.eclipse.jetty.webapp-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      Jetty web application support
    </description>
    <size>
      98402
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: Webapp Application Support'/>
      <p n='symbolicname' v='org.eclipse.jetty.webapp'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.webapp'/>
      <p n='uses' v='org.eclipse.jetty.util.resource,org.eclipse.jetty.xml,org.eclipse.jetty.util.log,org.eclipse.jetty.util,org.eclipse.jetty.server.handler,org.eclipse.jetty.server,org.eclipse.jetty.servlet,org.eclipse.jetty.util.security,org.eclipse.jetty.io,org.eclipse.jetty.security,org.eclipse.jetty.http,javax.servlet,org.eclipse.jetty.server.session,javax.servlet.http'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.webapp.jmx'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=2.5.0)(!(version&gt;=3.0.0)))' multiple='false' name='package' optional='false'>
      Import package javax.servlet.http ;version=[2.5.0,3.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.http)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.http ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.io)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.io ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.security)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.security ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.handler)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.handler ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.server.session)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.server.session ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.servlet)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.servlet ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.resource)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.resource ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.security)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.security ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.xml)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.xml ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.eclipse.jetty.xml/7.6.1.v20120215' presentationname='Jetty :: XML utilities' symbolicname='org.eclipse.jetty.xml' uri='org.eclipse.jetty.xml-7.6.1.jar' version='7.6.1.v20120215'>
    <description>
      The jetty xml utilities.
    </description>
    <size>
      36468
    </size>
    <license>
      http://www.apache.org/licenses/LICENSE-2.0, http://www.eclipse.org/org/documents/epl-v10.php
    </license>
    <documentation>
      http://www.eclipse.org/jetty
    </documentation>
    <copyright>
      Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Jetty :: XML utilities'/>
      <p n='symbolicname' v='org.eclipse.jetty.xml'/>
      <p n='version' t='version' v='7.6.1.v20120215'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.eclipse.jetty.xml'/>
      <p n='uses' v='org.eclipse.jetty.util.resource,org.eclipse.jetty.util.component,org.eclipse.jetty.util.log,org.eclipse.jetty.util,org.xml.sax,javax.xml.parsers,org.xml.sax.helpers'/>
      <p n='version' t='version' v='7.6.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.component)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.component ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.log)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.log ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.eclipse.jetty.util.resource)(version&gt;=7.6.0)(!(version&gt;=8.0.0)))' multiple='false' name='package' optional='false'>
      Import package org.eclipse.jetty.util.resource ;version=[7.6.0,8.0.0)
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax.helpers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax.helpers
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.5))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.5))
    </require>
  </resource>
  <resource id='org.mapdb/1.0.7.cl' presentationname='org.mapdb' symbolicname='org.mapdb' uri='org.mapdb-1.0.7.jar' version='1.0.7.cl'>
    <size>
      414065
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='org.mapdb'/>
      <p n='symbolicname' v='org.mapdb'/>
      <p n='version' t='version' v='1.0.7.cl'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.mapdb'/>
      <p n='version' t='version' v='1.0.7'/>
    </capability>
  </resource>
  <resource id='org.scala-lang.scala-actors/2.10.4.v20140209-180020-VFINAL-b66a39653b' presentationname='Scala Actors' symbolicname='org.scala-lang.scala-actors' uri='org.scala-lang.scala-actors-2.10.4.jar' version='2.10.4.v20140209-180020-VFINAL-b66a39653b'>
    <size>
      476667
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Scala Actors'/>
      <p n='symbolicname' v='org.scala-lang.scala-actors'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.actors.threadpool'/>
      <p n='uses' v='scala.actors.threadpool.helpers,scala.actors.threadpool.locks'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.actors.remote'/>
      <p n='uses' v='scala.runtime,scala,scala.actors,scala.collection,scala.reflect,scala.collection.mutable,scala.collection.generic,scala.collection.immutable,scala.util,scala.sys,scala.math'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.actors.threadpool.helpers'/>
      <p n='uses' v='scala.actors.threadpool,scala.actors.threadpool.locks'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.actors.threadpool.locks'/>
      <p n='uses' v='scala.actors.threadpool,scala.actors.threadpool.helpers'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.actors.scheduler'/>
      <p n='uses' v='scala.runtime,scala,scala.actors,scala.collection.mutable,scala.reflect,scala.concurrent,scala.concurrent.forkjoin,scala.sys,scala.util.control,scala.actors.threadpool,scala.actors.threadpool.locks,scala.collection.immutable,scala.util'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.actors'/>
      <p n='uses' v='scala,scala.collection,scala.reflect,scala.runtime,scala.collection.immutable,scala.concurrent,scala.concurrent.duration,scala.actors.scheduler,scala.collection.mutable,scala.collection.generic,scala.sys,scala.util.control,scala.concurrent.forkjoin'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <require extend='false' filter='(&amp;(package=scala)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.collection
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.generic)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.collection.generic
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.immutable)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.collection.immutable
    </require>
    <require extend='false' filter='(&amp;(package=scala.collection.mutable)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.collection.mutable
    </require>
    <require extend='false' filter='(&amp;(package=scala.concurrent)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.concurrent
    </require>
    <require extend='false' filter='(&amp;(package=scala.concurrent.duration)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.concurrent.duration
    </require>
    <require extend='false' filter='(&amp;(package=scala.concurrent.forkjoin)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.concurrent.forkjoin
    </require>
    <require extend='false' filter='(&amp;(package=scala.math)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.math
    </require>
    <require extend='false' filter='(&amp;(package=scala.reflect)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.reflect
    </require>
    <require extend='false' filter='(&amp;(package=scala.runtime)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.runtime
    </require>
    <require extend='false' filter='(&amp;(package=scala.sys)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.sys
    </require>
    <require extend='false' filter='(&amp;(package=scala.util)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.util
    </require>
    <require extend='false' filter='(&amp;(package=scala.util.control)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package scala.util.control
    </require>
  </resource>
  <resource id='org.scala-lang.scala-library/2.10.4.v20140209-180020-VFINAL-b66a39653b' presentationname='Scala Standard Library' symbolicname='org.scala-lang.scala-library' uri='org.scala-lang.scala-library-2.10.4.jar' version='2.10.4.v20140209-180020-VFINAL-b66a39653b'>
    <size>
      7126364
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='Scala Standard Library'/>
      <p n='symbolicname' v='org.scala-lang.scala-library'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.sys.process'/>
      <p n='uses' v='scala.runtime,scala,scala.sys,scala.util,scala.collection.immutable,scala.collection.mutable,scala.reflect,scala.xml,scala.collection,scala.concurrent,scala.collection.generic'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.annotation.unchecked'/>
      <p n='uses' v='scala.annotation,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.concurrent.duration'/>
      <p n='uses' v='scala,scala.math,scala.collection,scala.reflect,scala.runtime,scala.collection.immutable,scala.collection.generic,scala.collection.mutable'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml.persistent'/>
      <p n='uses' v='scala.xml,scala.collection.immutable,scala.collection,scala.collection.mutable,scala.runtime,scala,scala.util.logging,scala.xml.dtd,scala.xml.parsing,scala.io,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.concurrent'/>
      <p n='uses' v='scala.concurrent.duration,scala.runtime,scala,scala.reflect,scala.concurrent.impl,scala.collection,scala.util,scala.collection.mutable,scala.util.control,scala.collection.generic,scala.collection.immutable'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.parsing.combinator.testing'/>
      <p n='uses' v='scala.runtime,scala,scala.collection,scala.reflect,scala.collection.immutable,scala.util.parsing.combinator,scala.collection.mutable,scala.util.matching,scala.util,scala.util.parsing.input,scala.util.parsing.combinator.lexical,scala.util.parsing.combinator.syntactical,scala.util.parsing.combinator.token'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.beans'/>
      <p n='uses' v='scala.annotation,scala.reflect,scala.runtime,scala,scala.collection.mutable,scala.collection.generic'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.annotation'/>
      <p n='uses' v='scala.reflect,scala.collection,scala.collection.immutable,scala.collection.mutable,scala.runtime,scala'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.annotation.meta'/>
      <p n='uses' v='scala.annotation,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.concurrent.forkjoin'/>
      <p n='uses' v='scala.concurrent.util,sun.misc'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.reflect'/>
      <p n='uses' v='scala.collection.immutable,scala.collection.mutable,scala.runtime,scala,scala.collection,scala.sys'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.io'/>
      <p n='uses' v='scala.runtime,scala,scala.collection,scala.reflect,scala.collection.mutable,scala.collection.immutable,scala.util,scala.math,scala.collection.generic'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.automata'/>
      <p n='uses' v='scala.util.regexp,scala.runtime,scala,scala.collection.immutable,scala.collection,scala.collection.mutable,scala.reflect,scala.collection.generic,scala.math'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.ref'/>
      <p n='uses' v='scala.reflect,scala'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.matching'/>
      <p n='uses' v='scala.collection,scala.collection.immutable,scala.math,scala.collection.mutable,scala.reflect,scala,scala.collection.generic,scala.runtime'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.parsing.combinator'/>
      <p n='uses' v='scala.runtime,scala,scala.collection.immutable,scala.reflect,scala.util.matching,scala.util.parsing.input,scala.util,scala.collection,scala.collection.mutable,scala.sys'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.compat'/>
      <p n='uses' v='scala.util,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.runtime'/>
      <p n='uses' v='scala,scala.reflect,scala.math,scala.collection.mutable,scala.collection.immutable,scala.util.control,scala.compat,scala.collection,scala.xml,scala.util.hashing,scala.collection.generic,scala.sys'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.parsing.ast'/>
      <p n='uses' v='scala.util.parsing.input,scala.reflect,scala.runtime,scala,scala.collection.immutable,scala.collection,scala.collection.mutable,scala.collection.generic'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.logging'/>
      <p n='uses' v='scala,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.parsing.json'/>
      <p n='uses' v='scala.runtime,scala,scala.collection,scala.collection.immutable,scala.util.parsing.combinator.lexical,scala.util.parsing.combinator,scala.util.parsing.input,scala.collection.generic,scala.collection.mutable,scala.reflect,scala.util.parsing.combinator.token,scala.util.parsing.combinator.syntactical,scala.util'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml.dtd'/>
      <p n='uses' v='scala.collection,scala.collection.mutable,scala.runtime,scala,scala.reflect,scala.collection.immutable,scala.xml,scala.util.regexp,scala.collection.generic,scala.util.automata,scala.sys,scala.xml.parsing'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.parsing.combinator.token'/>
      <p n='uses' v='scala.runtime,scala,scala.collection,scala.collection.mutable,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.parsing.input'/>
      <p n='uses' v='scala.reflect,scala,scala.runtime,scala.collection.mutable,scala.collection.immutable,scala.collection,scala.collection.generic'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.testing'/>
      <p n='uses' v='scala.collection.immutable,scala.compat,scala.runtime,scala,scala.collection,scala.math,scala.collection.mutable,scala.collection.generic,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.grammar'/>
      <p n='uses' v='scala.collection,scala.runtime,scala,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.immutable'/>
      <p n='uses' v='scala,scala.collection,scala.reflect,scala.runtime,scala.collection.parallel,scala.collection.generic,scala.collection.parallel.immutable,scala.collection.mutable,scala.math,scala.sys,scala.util,scala.io,scala.util.matching,scala.compat'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection'/>
      <p n='uses' v='scala,scala.reflect,scala.collection.immutable,scala.collection.generic,scala.math,scala.collection.mutable,scala.collection.parallel,scala.runtime,scala.util.hashing,scala.collection.convert,scala.collection.concurrent,scala.util.control'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.text'/>
      <p n='uses' v='scala.collection,scala.runtime,scala,scala.reflect,scala.collection.immutable'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala'/>
      <p n='uses' v='scala.reflect,scala.runtime,scala.collection.mutable,scala.util,scala.compat,scala.collection.generic,scala.collection,scala.collection.immutable,scala.math,scala.collection.parallel,scala.collection.parallel.immutable,scala.sys,scala.xml,scala.annotation'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.continuations'/>
      <p n='uses' v='scala.runtime,scala,scala.reflect,scala.annotation'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.convert'/>
      <p n='uses' v='scala.collection.mutable,scala.runtime,scala,scala.collection,scala.collection.concurrent,scala.reflect,scala.collection.immutable,scala.collection.generic,scala.util.hashing'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.hashing'/>
      <p n='uses' v='scala,scala.reflect,scala.runtime,scala.collection,scala.collection.immutable'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.parallel'/>
      <p n='uses' v='scala.collection,scala.runtime,scala,scala.concurrent.forkjoin,scala.collection.generic,scala.reflect,scala.collection.mutable,scala.math,scala.collection.immutable,scala.sys,scala.concurrent,scala.concurrent.impl,scala.collection.parallel.immutable,scala.collection.parallel.mutable,scala.util.control,scala.util'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml.include'/>
      <p n='uses' v='scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.script'/>
      <p n='uses' v='scala.collection,scala.runtime,scala,scala.reflect,scala.collection.mutable'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.math'/>
      <p n='uses' v='scala.runtime,scala,scala.collection.immutable,scala.collection.mutable,scala.collection,scala.reflect,scala.util'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util'/>
      <p n='uses' v='scala.collection.mutable,scala.reflect,scala,scala.collection,scala.runtime,scala.util.control,scala.collection.immutable,scala.collection.generic,scala.math'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.control'/>
      <p n='uses' v='scala.reflect,scala,scala.runtime,scala.collection,scala.collection.generic,scala.util,scala.collection.mutable,scala.sys'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.reflect.macros.internal'/>
      <p n='uses' v='scala.annotation,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml.parsing'/>
      <p n='uses' v='scala.collection,scala.collection.immutable,scala.collection.mutable,scala.runtime,scala,org.xml.sax,scala.reflect,scala.xml,scala.io,scala.xml.dtd,javax.xml.parsers,scala.xml.factory,org.xml.sax.helpers,scala.util.logging,scala.collection.generic,scala.math,scala.sys,scala.util.automata'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.annotation.target'/>
      <p n='uses' v='scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.parallel.immutable'/>
      <p n='uses' v='scala.collection.mutable,scala.runtime,scala,scala.collection.immutable,scala.collection,scala.collection.parallel,scala.collection.generic,scala.reflect,scala.math'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.sys'/>
      <p n='uses' v='scala.runtime,scala,scala.reflect,scala.collection.immutable,scala.collection,scala.collection.mutable,scala.collection.convert,scala.collection.generic'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml'/>
      <p n='uses' v='scala.collection,scala.collection.mutable,scala.reflect,scala.runtime,scala,scala.xml.pull,scala.xml.dtd,scala.collection.immutable,scala.collection.generic,scala.collection.parallel,scala.collection.parallel.immutable,scala.math,org.xml.sax,scala.util.hashing,scala.xml.parsing,scala.xml.factory,javax.xml.parsers,scala.util.control'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.parallel'/>
      <p n='uses' v='scala.runtime,scala,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.concurrent'/>
      <p n='uses' v='scala.collection.immutable,scala.collection,scala.collection.mutable,scala.runtime,scala,scala.math,scala.concurrent.forkjoin,scala.reflect,scala.collection.generic,scala.util.control,scala.util.hashing,scala.collection.parallel.mutable,scala.collection.parallel'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.mutable'/>
      <p n='uses' v='scala.collection.immutable,scala.collection,scala.math,scala.reflect,scala,scala.collection.generic,scala.runtime,scala.sys,scala.collection.script,scala.collection.parallel,scala.collection.parallel.mutable,scala.compat,scala.util,scala.util.hashing,scala.util.matching,scala.collection.convert'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.regexp'/>
      <p n='uses' v='scala.collection,scala.runtime,scala,scala.reflect'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.parallel.mutable'/>
      <p n='uses' v='scala.collection.mutable,scala.reflect,scala,scala.collection.generic,scala.runtime,scala.collection,scala.collection.parallel,scala.collection.immutable,scala.math,scala.sys,scala.collection.parallel.immutable,scala.collection.concurrent'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml.include.sax'/>
      <p n='uses' v='scala.collection.immutable,scala.util.matching,scala.runtime,scala,scala.reflect,org.xml.sax.helpers,org.xml.sax,scala.xml,scala.collection,scala.collection.mutable,scala.util.control,scala.xml.include,org.xml.sax.ext'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml.factory'/>
      <p n='uses' v='scala.xml,scala.runtime,scala,scala.collection.immutable,scala.collection,scala.reflect,scala.xml.parsing,scala.collection.mutable,scala.util.logging,scala.collection.generic,javax.xml.parsers,org.xml.sax.helpers,org.xml.sax'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml.transform'/>
      <p n='uses' v='scala.xml,scala.collection,scala.runtime,scala,scala.collection.mutable,scala.reflect,scala.collection.generic'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.parsing.combinator.lexical'/>
      <p n='uses' v='scala.runtime,scala,scala.collection,scala.util.parsing.combinator,scala.util,scala.reflect,scala.util.parsing.combinator.token,scala.util.parsing.input,scala.collection.mutable,scala.collection.immutable,scala.math,scala.collection.generic'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.util.parsing.combinator.syntactical'/>
      <p n='uses' v='scala.util.parsing.combinator.lexical,scala.util,scala.collection.mutable,scala.util.parsing.combinator,scala.reflect,scala.util.parsing.combinator.token,scala.runtime,scala,scala.collection,scala.collection.immutable'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.xml.pull'/>
      <p n='uses' v='scala.runtime,scala,scala.collection,scala.reflect,scala.xml,scala.xml.parsing,scala.collection.immutable,scala.collection.mutable,scala.xml.dtd,scala.io'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.concurrent.impl'/>
      <p n='uses' v='scala.concurrent.util,sun.misc,scala.concurrent,scala.util,scala.util.control,scala.reflect,scala,scala.concurrent.forkjoin,scala.runtime,scala.collection.immutable,scala.math,scala.collection.mutable,scala.concurrent.duration'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.concurrent.util'/>
      <p n='uses' v='sun.misc'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <capability name='package'>
      <p n='package' v='scala.collection.generic'/>
      <p n='uses' v='scala.reflect,scala.runtime,scala,scala.collection.immutable,scala.collection,scala.collection.mutable,scala.collection.parallel,scala.math'/>
      <p n='version' t='version' v='2.10.4.v20140209-180020-VFINAL-b66a39653b'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax.ext)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax.ext
    </require>
    <require extend='false' filter='(&amp;(package=org.xml.sax.helpers)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.xml.sax.helpers
    </require>
    <require extend='false' filter='(&amp;(package=sun.misc)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package sun.misc
    </require>
  </resource>
  <resource id='osgi.cmpn/4.3.0.201111022214' presentationname='osgi.cmpn' symbolicname='osgi.cmpn' uri='osgi.cmpn-4.3.0.jar' version='4.3.0.201111022214'>
    <description>
      OSGi Service Platform Release 4 Version 4.3, Compendium Interfaces
       and Classes for use in compiling bundles.
    </description>
    <size>
      743022
    </size>
    <license>
      http://opensource.org/licenses/apache2.0.php; link="http://www.apache.org/licenses/LICENSE-2.0";
       description="Apache License, Version 2.0"
    </license>
    <copyright>
      Copyright (c) OSGi Alliance (2000, 2011). All Rights Reserved.
    </copyright>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='osgi.cmpn'/>
      <p n='symbolicname' v='osgi.cmpn'/>
      <p n='version' t='version' v='4.3.0.201111022214'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.application'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.application'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.blueprint.reflect'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.blueprint.container'/>
      <p n='uses' v='org.osgi.service.blueprint.reflect,org.osgi.framework'/>
      <p n='version' t='version' v='1.0.2'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.cm'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.4.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.component'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.component.annotations'/>
      <p n='version' t='version' v='1.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.coordinator'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.deploymentadmin'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.deploymentadmin.spi'/>
      <p n='uses' v='org.osgi.framework,org.osgi.service.deploymentadmin'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.device'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.dmt.notification'/>
      <p n='uses' v='org.osgi.service.dmt'/>
      <p n='version' t='version' v='2.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.dmt'/>
      <p n='version' t='version' v='2.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.dmt.security'/>
      <p n='uses' v='org.osgi.service.dmt'/>
      <p n='version' t='version' v='2.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.dmt.spi'/>
      <p n='uses' v='org.osgi.service.dmt'/>
      <p n='version' t='version' v='2.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.dmt.notification.spi'/>
      <p n='uses' v='org.osgi.service.dmt.notification'/>
      <p n='version' t='version' v='2.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.event'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.3.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.http'/>
      <p n='uses' v='javax.servlet.http,javax.servlet'/>
      <p n='version' t='version' v='1.2.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.io'/>
      <p n='uses' v='javax.microedition.io'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.jdbc'/>
      <p n='uses' v='javax.sql'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.jndi'/>
      <p n='uses' v='javax.naming.directory,javax.naming'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.jpa'/>
      <p n='uses' v='javax.persistence'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.log'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.3.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.metatype'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.monitor'/>
      <p n='version' t='version' v='1.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.prefs'/>
      <p n='version' t='version' v='1.1.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.provisioning'/>
      <p n='version' t='version' v='1.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.remoteserviceadmin'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.upnp'/>
      <p n='version' t='version' v='1.2.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.useradmin'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.1.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.service.wireadmin'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.util.measurement'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.util.position'/>
      <p n='uses' v='org.osgi.util.measurement'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.util.tracker'/>
      <p n='uses' v='org.osgi.framework'/>
      <p n='version' t='version' v='1.5.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.osgi.util.xml'/>
      <p n='uses' v='org.osgi.framework,javax.xml.parsers'/>
      <p n='version' t='version' v='1.0.1'/>
    </capability>
    <require extend='false' filter='(&amp;(package=javax.microedition.io)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.microedition.io
    </require>
    <require extend='false' filter='(&amp;(package=javax.naming)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.naming
    </require>
    <require extend='false' filter='(&amp;(package=javax.naming.directory)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.naming.directory
    </require>
    <require extend='false' filter='(&amp;(package=javax.persistence)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.persistence
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.servlet
    </require>
    <require extend='false' filter='(&amp;(package=javax.servlet.http)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.servlet.http
    </require>
    <require extend='false' filter='(&amp;(package=javax.sql)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.sql
    </require>
    <require extend='false' filter='(&amp;(package=javax.xml.parsers)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package javax.xml.parsers
    </require>
    <require extend='false' filter='(&amp;(package=org.osgi.framework)(version&gt;=0.0.0))' multiple='false' name='package' optional='true'>
      Import package org.osgi.framework
    </require>
  </resource>
  <resource id='slf4j.api/1.6.4' presentationname='slf4j-api' symbolicname='slf4j.api' uri='slf4j.api-1.6.4.jar' version='1.6.4'>
    <description>
      The slf4j API
    </description>
    <size>
      25962
    </size>
    <capability name='bundle'>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='slf4j-api'/>
      <p n='symbolicname' v='slf4j.api'/>
      <p n='version' t='version' v='1.6.4'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j'/>
      <p n='version' t='version' v='1.6.4'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j.spi'/>
      <p n='version' t='version' v='1.6.4'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j.helpers'/>
      <p n='version' t='version' v='1.6.4'/>
    </capability>
    <require extend='false' filter='(&amp;(package=org.slf4j.impl)(version&gt;=1.6.0))' multiple='false' name='package' optional='false'>
      Import package org.slf4j.impl ;version=1.6.0
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.3))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.3))
    </require>
  </resource>
  <resource id='slf4j.log4j12/1.6.4' presentationname='slf4j-log4j12' symbolicname='slf4j.log4j12' uri='slf4j.log4j12-1.6.4.jar' version='1.6.4'>
    <description>
      The slf4j log4j-12 binding
    </description>
    <size>
      9748
    </size>
    <capability name='fragment'>
      <p n='host' v='slf4j.api'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='bundle'>
      <p n='host' v='slf4j.api'/>
      <p n='manifestversion' v='2'/>
      <p n='presentationname' v='slf4j-log4j12'/>
      <p n='symbolicname' v='slf4j.log4j12'/>
      <p n='version' t='version' v='1.6.4'/>
      <p n='version' t='version' v='0.0.0'/>
    </capability>
    <capability name='package'>
      <p n='package' v='org.slf4j.impl'/>
      <p n='version' t='version' v='1.6.4'/>
    </capability>
    <require extend='true' filter='(&amp;(symbolicname=slf4j.api)(version&gt;=0.0.0))' multiple='false' name='bundle' optional='false'>
      Required Host slf4j.api
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j)(version&gt;=1.6.4))' multiple='false' name='package' optional='false'>
      Import package org.slf4j ;version=1.6.4
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.spi)(version&gt;=1.6.4))' multiple='false' name='package' optional='false'>
      Import package org.slf4j.spi ;version=1.6.4
    </require>
    <require extend='false' filter='(&amp;(package=org.slf4j.helpers)(version&gt;=1.6.4))' multiple='false' name='package' optional='false'>
      Import package org.slf4j.helpers ;version=1.6.4
    </require>
    <require extend='false' filter='(&amp;(package=org.apache.log4j)(version&gt;=0.0.0))' multiple='false' name='package' optional='false'>
      Import package org.apache.log4j
    </require>
    <require extend='false' filter='(|(ee=J2SE-1.3))' multiple='false' name='ee' optional='false'>
      Execution Environment (|(ee=J2SE-1.3))
    </require>
  </resource>
</repository>