[supervisord]
; logfile = /log                              ; main log file (default $CWD/supervisord.log)
childlogdir = /var/log/supervisor/          ; 'AUTO' child log dir (default $TEMP)
logfile_maxbytes = 50MB                     ; max main logfile bytes b4 rotation (default 50MB)
logfile_backups = 10                        ; num of main logfile rotation backups (default 10)
loglevel = info                             ; log level (default info; others: debug,warn,trace)
pidfile = /%(here)s/supervisord.pid         ; supervisord pidfile (default supervisord.pid)
nodaemon = true                             ; start in foreground if true (default false)
minfds = 1024                               ; min. avail startup file descriptors (default 1024)
minprocs = 200                              ; min. avail process descriptors (default 200)
user = root                                 ; default is current user, required if root
umask = 022                                 ; sets the file mode creation mask (default 022)
identifier = supervisor                     ; process id string, used by RPC xface (default supervisor)
; directory = /data                           ; (default is not to cd during start)
nocleanup = true                            ; clear AUTO child logs at startup (default false)
; environment = KEY=value, KEY=value          ; key value pairs to add to environment
; strip_ansi = false                          ; strip ANSI escape sequences from child logs (default false)

[supervisorctl]
serverurl = unix:///%(here)s/supervisor.sock ; use a unix:// URL  for a unix socket
; history_file = /log/cmd_hist                ; use readline history if available
; serverurl = http://127.0.0.1:9001           ; use an http:// url to specify an inet socket
; username = chris                            ; should be same as http_username if set
; password = 123                              ; should be same as http_password if set
; prompt = mysupervisor                       ; cmd line prompt (default: "supervisor")

[unix_http_server]
file = /%(here)s/supervisor.sock            ; the path to the socket file
; chmod = 0700                                ; sockef file mode (default 0700)
; chown = nobody:nogroup                      ; socket file uid:gid owner
; username = user                             ; default is no username (open server)
; password = 123                              ; default is no password (open server)

; [inet_http_server]
; port = *:9003
; username = user
; password = {SHA}PASSWORDHEXHASH

; [eventlistener:theeventlistenername]
; command = /bin/eventlistener        ; the program (relative uses PATH, can take args)
; process_name = %(program_name)s     ; process_name expr (default %(program_name)s)
; numprocs = 1                        ; number of processes copies to start (def 1)
; events = EVENT                      ; event notif. types to subscribe to (req'd)
; buffer_size = 10                    ; event buffer queue size (default 10)
; directory = /tmp                    ; directory to cwd to before exec (def no cwd)
; umask = 022                         ; umask for process (default None)
; priority = -1                       ; the relative start priority (default -1)
; autostart = true                    ; start at supervisord start (default true)
; autorestart = unexpected            ; restart at unexpected quit (default unexpected)
; startsecs = 10                      ; number of secs prog must stay running (def. 1)
; startretries = 3                    ; max # of serial start failures (default 3)
; exitcodes = 0,2                     ; 'expected' exit codes for process (default 0,2)
; stopsignal = QUIT                   ; signal used to kill process (default TERM)
; stopwaitsecs = 10                   ; max num secs to wait b4 SIGKILL (default 10)
; user = chrism                       ; setuid to this UNIX account to run the program
; redirect_stderr = true              ; redirect proc stderr to stdout (default false)
; stdout_logfile = /a/path            ; stdout log path, NONE for none; (default AUTO)
; stdout_logfile_maxbytes = 1MB       ; max # logfile bytes b4 rotation (default 50MB)
; stdout_logfile_backups = 10         ; # of stdout logfile backups (default 10)
; stdout_events_enabled = false       ; emit events on stdout writes (default false)
; stderr_logfile = /a/path            ; stderr log path, NONE for none (default AUTO)
; stderr_logfile_maxbytes = 1MB       ; max # logfile bytes b4 rotation (default 50MB)
; stderr_logfile_backups              ; # of stderr logfile backups (default 10)
; stderr_events_enabled = false       ; emit events on stderr writes (default false)
; environment = A=1,B=2               ; process environment additions
; serverurl = AUTO                    ; override serverurl computation (childutils)
 
; The below sample group section shows all possible group values,
; create one or more 'real' group: sections to create "heterogeneous"
; process groups.
 
; [group:thegroupname]
; programs=progname1,progname2 ; each refers to 'x' in [program:x] definitions
; priority=999 ; the relative start priority (default 999)


; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

[include]
files = /etc/supervisor/conf.d/*.conf
